{"version":3,"file":"main.js","sources":["../../node_modules/nanoevents/index.js","../../src/utils/GpxUtils.ts","../../src/utils/SwissTileLayer.ts","../../src/utils/LayerUtils.ts","../../src/utils/TextUtils.ts","../../src/widgets/Overview.tsx","../../src/utils/WidgetUtils.ts","../../src/MapClass.ts","../../src/utils/ConfigUtils.ts","../../src/MapControl.ts"],"sourcesContent":["export let createNanoEvents = () => ({\n  events: {},\n  emit(event, ...args) {\n    let callbacks = this.events[event] || []\n    for (let i = 0, length = callbacks.length; i < length; i++) {\n      callbacks[i](...args)\n    }\n  },\n  on(event, cb) {\n    this.events[event]?.push(cb) || (this.events[event] = [cb])\n    return () => {\n      this.events[event] = this.events[event]?.filter(i => cb !== i)\n    }\n  }\n})\n","import Geometry from '@arcgis/core/geometry/Geometry';\r\nimport Point from '@arcgis/core/geometry/Point';\r\nimport Polyline from '@arcgis/core/geometry/Polyline';\r\nimport * as projection from '@arcgis/core/geometry/projection';\r\nimport SpatialReference from '@arcgis/core/geometry/SpatialReference';\r\nimport Graphic from '@arcgis/core/Graphic';\r\nimport esriRequest from '@arcgis/core/request';\r\n\r\ntype GpxContent = {\r\n    waypoints: Graphic[];\r\n    tracks: Graphic[];\r\n}\r\n\r\nexport default class GpxUtils {\r\n\r\n    static gpxToFeatures(url: string, spatialReference: SpatialReference): Promise<GpxContent> {\r\n        return new Promise((resolve) => {\r\n            esriRequest(url, {\r\n                responseType: 'xml',\r\n            }).then((r) => {\r\n                const xml = r.data;\r\n                projection.load().then(() => {\r\n                    const result: GpxContent = {\r\n                        waypoints: [],\r\n                        tracks: [],\r\n                    };\r\n                    xml.querySelectorAll('wpt').forEach((waypoint, i) => {\r\n                        const wPt = new Point({ latitude: waypoint.attributes.lat.value, longitude: waypoint.attributes.lon.value });\r\n                        const gr = this.getGraphic(wPt, waypoint, `waypoint ${i + 1}`, spatialReference);\r\n                        result.waypoints.push(gr);\r\n                    });\r\n                    xml.querySelectorAll('trk').forEach((track, i) => {\r\n                        const polyline = new Polyline({ paths: [], spatialReference: { wkid: 4326 } });\r\n                        track.querySelectorAll('trkseg').forEach((segment) => {\r\n                            const path: Point[] = [];\r\n                            const points = segment.querySelectorAll('trkpt');\r\n                            points.forEach((point) => {\r\n                                const pt = new Point({ latitude: point.attributes.lat.value, longitude: point.attributes.lon.value });\r\n                                path.push(pt);\r\n                            });\r\n                            polyline.addPath(path);\r\n                        });\r\n                        const gr = this.getGraphic(polyline, track, `track ${i + 1}`, spatialReference);\r\n                        result.tracks.push(gr);\r\n                    });\r\n                    xml.querySelectorAll('rte').forEach((route, i) => {\r\n                        const polyline = new Polyline({ paths: [], spatialReference: { wkid: 4326 } });\r\n                        const path: Point[] = [];\r\n                        route.querySelectorAll('rtept').forEach((point) => {\r\n                            const pt = new Point({ latitude: point.attributes.lat.value, longitude: point.attributes.lon.value });\r\n                            path.push(pt);\r\n                        });\r\n                        polyline.addPath(path);\r\n                        const gr = this.getGraphic(polyline, route, `route ${i + 1}`, spatialReference);\r\n                        result.tracks.push(gr);\r\n                    });\r\n                    resolve(result);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    private static getGraphic(geom: Geometry, node: any, defaultName: string, spatialReference: SpatialReference): Graphic {\r\n        const n = node.querySelector('name');\r\n        let name = defaultName;\r\n        if (n) {\r\n            name = n.textContent;\r\n        }\r\n        const d = node.querySelector('desc');\r\n        let description = '';\r\n        if (d) {\r\n            description = d.textContent;\r\n        }\r\n        const popupTemplate = {\r\n            title: name,\r\n            content: description,\r\n        };\r\n        return new Graphic({\r\n            geometry: projection.project(geom, spatialReference) as Geometry,\r\n            popupTemplate,\r\n        });\r\n    }\r\n}\r\n","import { property } from '@arcgis/core/core/accessorSupport/decorators/property';\r\nimport { subclass } from '@arcgis/core/core/accessorSupport/decorators/subclass';\r\nimport Point from '@arcgis/core/geometry/Point';\r\nimport SpatialReference from '@arcgis/core/geometry/SpatialReference';\r\nimport BaseTileLayer from '@arcgis/core/layers/BaseTileLayer';\r\nimport TileInfo from '@arcgis/core/layers/support/TileInfo';\r\n\r\n@subclass('esri.layers.SwissTileLayer')\r\nexport default class SwissTileLayer extends BaseTileLayer {\r\n\r\n    @property()\r\n    // eslint-disable-next-line indent\r\n    urlTemplate: string;\r\n\r\n    constructor(params) {\r\n        super();\r\n        const spatialReference = new SpatialReference({\r\n            wkid: 2056,\r\n        });\r\n        const tileInfo = TileInfo.create({\r\n            spatialReference,\r\n            numLODs: params.scales.length,\r\n            scales: params.scales,\r\n        });\r\n        tileInfo.origin = new Point({\r\n            x: 2420000,\r\n            y: 1350000,\r\n            spatialReference,\r\n        });\r\n        this.title = params.title;\r\n        this.urlTemplate = params.urlTemplate;\r\n        this.spatialReference = spatialReference;\r\n        this.tileInfo = tileInfo;\r\n    }\r\n\r\n    getTileUrl(level: number, row: number, col: number): string {\r\n        return this.urlTemplate\r\n            .replace('{level}', level.toString())\r\n            .replace('{col}', col.toString())\r\n            .replace('{row}', row.toString());\r\n    }\r\n\r\n}\r\n","import Basemap from '@arcgis/core/Basemap';\r\nimport Geometry from '@arcgis/core/geometry/Geometry';\r\nimport esriId from '@arcgis/core/identity/IdentityManager';\r\nimport FeatureLayer from '@arcgis/core/layers/FeatureLayer';\r\nimport ImageryLayer from '@arcgis/core/layers/ImageryLayer';\r\nimport Layer from '@arcgis/core/layers/Layer';\r\nimport TileLayer from '@arcgis/core/layers/TileLayer';\r\nimport VectorTileLayer from '@arcgis/core/layers/VectorTileLayer';\r\nimport WMTSLayer from '@arcgis/core/layers/WMTSLayer';\r\nimport SwissTileLayer from './SwissTileLayer';\r\nimport esriRequest from '@arcgis/core/request';\r\nimport * as query from '@arcgis/core/rest/query';\r\nimport { BasemapItem, ConfigItem, LayerQueryItem } from '../types/ConfigItem';\r\n\r\nexport default class LayerUtils {\r\n    private serviceDescription = null;\r\n    private config: ConfigItem;\r\n    private serviceUrl: string;\r\n\r\n    constructor(config: ConfigItem) {\r\n        this.config = config;\r\n        this.serviceUrl = config.vectorServiceUrl;\r\n        const token = config.vectorServiceToken;\r\n        esriId.registerToken({\r\n            token,\r\n            server: `${this.serviceUrl.split('/rest/services')[0]}/rest/services`,\r\n        });\r\n    }\r\n\r\n    getFeatureLayers(layers: string[]): Promise<FeatureLayer[]> {\r\n        return new Promise((resolve) => {\r\n            this.getServiceDescription().then((r) => {\r\n                const featureLayers: FeatureLayer[] = [];\r\n                r.layers.forEach((l) => {\r\n                    if (layers.includes(l.name)) {\r\n                        const featureLayer = new FeatureLayer({\r\n                            url: `${this.serviceUrl}/${l.id}`,\r\n                            title: l.name,\r\n                        });\r\n                        featureLayer.on('layerview-create', (e) => {\r\n                            const fLayer = e.layerView.layer as FeatureLayer;\r\n                            fLayer.popupTemplate = fLayer.createPopupTemplate();\r\n                            // requête si le champ pricipal est une expression Arcade\r\n                            /*esriRequest(url, {\r\n                                query: {\r\n                                    f: 'json',\r\n                                },\r\n                                responseType: 'json',\r\n                            }).then((r2) => {\r\n                                // r2.displayFieldExpressionInfo contient \"$feature.VOIE_TXT + \\\" \\\" + $feature.NO_ENTREE + \\\", \\\" + $feature.CODEPOST_4 + \\\" \\\" + $feature.LOCALITE;\"\r\n                                // il faudrait convertir cela dans la chaîne ci-dessous\r\n                                //fLayer.popupTemplate.title = '{VOIE_TXT} {NO_ENTREE}, {CODEPOST_4} {LOCALITE};';\r\n                            });*/\r\n                        });\r\n                        featureLayers.push(featureLayer);\r\n                    }\r\n                });\r\n                resolve(featureLayers);\r\n            });\r\n        });\r\n    }\r\n\r\n    queryLayer(layerQuery: LayerQueryItem, ids: string[]): Promise<Geometry[]> {\r\n        return new Promise((resolve) => {\r\n            this.getServiceDescription().then((r) => {\r\n                const layerInfo = r.layers.filter((l) => l.name === layerQuery.layer)[0];\r\n                if (!layerInfo) {\r\n                    console.warn(`Invalid layer name in config file: ${layerQuery.layer}`);\r\n                    resolve([]);\r\n                    return;\r\n                }\r\n                query.executeQueryJSON(`${this.serviceUrl}/${layerInfo.id}`, {\r\n                    where: `${layerQuery.field} in ('${ids.join('\\',\\'')}')`,\r\n                    returnGeometry: true,\r\n                }).then((r2) => {\r\n                    resolve(r2.features.map((f) => f.geometry));\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    getBasemaps(basemapItems: BasemapItem[]): Basemap[] {\r\n        const result: Basemap[] = [];\r\n        basemapItems.forEach((item) => {\r\n            const layer = this.getLayer(item);\r\n            if (layer) {\r\n                result.push(new Basemap({\r\n                    baseLayers: [layer],\r\n                    title: item.alias,\r\n                    thumbnailUrl: item.thumbnailUrl,\r\n                }));\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    private getServiceDescription(): Promise<any> {\r\n        return new Promise((resolve) => {\r\n            if (this.serviceDescription === null) {\r\n                esriRequest(this.serviceUrl, {\r\n                    query: {\r\n                        f: 'json',\r\n                    },\r\n                    responseType: 'json',\r\n                }).then((r) => {\r\n                    this.serviceDescription = r.data;\r\n                    resolve(this.serviceDescription);\r\n                });\r\n            } else {\r\n                resolve(this.serviceDescription);\r\n            }\r\n        });\r\n    }\r\n\r\n    private getLayer(params: BasemapItem): Layer | null {\r\n        switch (params.type) {\r\n            case 'tile':\r\n                return new SwissTileLayer({\r\n                    title: params.alias,\r\n                    urlTemplate: params.urlTemplate,\r\n                    scales: this.config.scales,\r\n                });\r\n            case 'wmts':\r\n                return new WMTSLayer({\r\n                    url: params.url,\r\n                    activeLayer: {\r\n                        id: params.layerId,\r\n                    },\r\n                    copyright: params.copyright,\r\n                });\r\n            case 'mapservice':\r\n                return new TileLayer({\r\n                    url: params.url,\r\n                    copyright: params.copyright,\r\n                });\r\n            case 'imageservice':\r\n                return new ImageryLayer({\r\n                    url: params.url,\r\n                    copyright: params.copyright,\r\n                });\r\n            case 'vectortile':\r\n                return new VectorTileLayer({\r\n                    url: params.url,\r\n                });\r\n            default:\r\n                console.warn(`Unsupported basemap type: ${params.type}`);\r\n                return null;\r\n        }\r\n    }\r\n\r\n}\r\n","import Point from '@arcgis/core/geometry/Point';\r\nimport SpatialReference from '@arcgis/core/geometry/SpatialReference';\r\nimport Graphic from '@arcgis/core/Graphic';\r\nimport esriRequest from '@arcgis/core/request';\r\nimport PictureMarkerSymbol from '@arcgis/core/symbols/PictureMarkerSymbol';\r\n\r\nexport default class TextUtils {\r\n\r\n    static txtToFeatures(url: string, spatialReference: SpatialReference): Promise<Graphic[]> {\r\n        return new Promise((resolve) => {\r\n            esriRequest(url, {\r\n                responseType: 'text',\r\n            }).then((r) => {\r\n                const graphics: Graphic[] = [];\r\n                r.data.split('\\n').forEach((row: string, index: number) => {\r\n                    if (index) { // la première ligne contient le nom des champs\r\n                        const parts = row.split('\\t');\r\n                        if (parts.length >= 5) {\r\n                            const coords = parts[0].split(',');\r\n                            const geometry = new Point({ x: parseFloat(coords[1]), y: parseFloat(coords[0]), spatialReference });\r\n                            const popupTemplate = {\r\n                                title: parts[1],\r\n                                content: parts[2],\r\n                            };\r\n                            const symbolSize = parts[4].split(',');\r\n                            const symbol = new PictureMarkerSymbol({\r\n                                url: parts[3],\r\n                                width: `${symbolSize[0]}px`,\r\n                                height: `${symbolSize[1]}px`,\r\n                            });\r\n                            graphics.push(new Graphic({\r\n                                geometry,\r\n                                symbol,\r\n                                popupTemplate,\r\n                            }));\r\n                        }\r\n                    }\r\n                });\r\n                resolve(graphics);\r\n            });\r\n        });\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport Basemap from '@arcgis/core/Basemap';\r\nimport { property, subclass } from '@arcgis/core/core/accessorSupport/decorators';\r\nimport { init } from '@arcgis/core/core/watchUtils';\r\nimport Graphic from '@arcgis/core/Graphic';\r\nimport TileInfo from '@arcgis/core/layers/support/TileInfo';\r\nimport Map from '@arcgis/core/Map';\r\nimport MapView from '@arcgis/core/views/MapView';\r\nimport Expand from '@arcgis/core/widgets/Expand';\r\nimport { tsx } from '@arcgis/core/widgets/support/widget';\r\nimport Widget from '@arcgis/core/widgets/Widget';\r\n\r\ninterface OverviewParams extends __esri.WidgetProperties {\r\n    basemap: Basemap;\r\n    mainView: MapView;\r\n    scales: number[];\r\n    factor: number;\r\n}\r\n\r\n@subclass('esri.widgets.Overview')\r\nexport default class Overview extends Widget {\r\n    private overview: MapView;\r\n    private extentGraphic: Graphic;\r\n    private mainView: MapView;\r\n    private basemap: Basemap;\r\n    private scales: number[];\r\n    private factor: number;\r\n\r\n    constructor(params?: OverviewParams) {\r\n        super(params);\r\n    }\r\n\r\n    postInitialize() {\r\n        init(this.mainView, 'center, interacting, scale', () => {\r\n            this.onViewChange();\r\n        });\r\n    }\r\n\r\n    @property()\r\n        expand: Expand;\r\n\r\n    render() {\r\n        setTimeout(() => {\r\n            if (this.expand.expanded) {\r\n                this.onViewChange();\r\n            }\r\n        }, 10);\r\n        return <div id={`${this.id}_cont`} style=\"width:250px;height:150px;background:#fff\"></div>;\r\n    }\r\n\r\n    private onViewChange(): void {\r\n        if (this.expand.expanded) {\r\n            if (!this.overview && document.getElementById(`${this.id}_cont`)) {\r\n                this.createMap();\r\n                this.createExtentGraphic();\r\n            }\r\n            if (this.overview) {\r\n                this.overview.center = this.mainView.center;\r\n                this.overview.scale = this.mainView.scale * this.factor;\r\n                this.extentGraphic.geometry = this.mainView.extent;\r\n            }\r\n        }\r\n    }\r\n\r\n    private createMap(): void {\r\n        const map = new Map({\r\n            basemap: this.basemap,\r\n        });\r\n        const tileInfo = TileInfo.create({\r\n            spatialReference: this.mainView.spatialReference,\r\n            numLODs: this.scales.length,\r\n            scales: this.scales,\r\n        });\r\n        this.overview = new MapView({\r\n            container: `${this.id}_cont`,\r\n            map,\r\n            scale: this.mainView.scale,\r\n            center: this.mainView.center,\r\n            spatialReference: this.mainView.spatialReference,\r\n            constraints: {\r\n                rotationEnabled: false,\r\n                lods: tileInfo.lods,\r\n            },\r\n            ui: {\r\n                components: [],\r\n            },\r\n        });\r\n        this.overview.when(() => {\r\n            const stopEvtPropagation = (event) => {\r\n                event.stopPropagation();\r\n            };\r\n            this.overview.on('mouse-wheel', stopEvtPropagation);\r\n            this.overview.on('double-click', stopEvtPropagation);\r\n            this.overview.on('double-click', ['Control'], stopEvtPropagation);\r\n            this.overview.on('drag', stopEvtPropagation);\r\n            this.overview.on('drag', ['Shift'], stopEvtPropagation);\r\n            this.overview.on('drag', ['Shift', 'Control'], stopEvtPropagation);\r\n            this.overview.on('key-down', (event) => {\r\n                const prohibitedKeys = [\r\n                    '+',\r\n                    '-',\r\n                    'Shift',\r\n                    '_',\r\n                    '=',\r\n                    'ArrowUp',\r\n                    'ArrowDown',\r\n                    'ArrowRight',\r\n                    'ArrowLeft',\r\n                ];\r\n                const keyPressed = event.key;\r\n                if (prohibitedKeys.indexOf(keyPressed) !== -1) {\r\n                    event.stopPropagation();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private createExtentGraphic(): void {\r\n        const symbol = {\r\n            type: 'simple-fill',\r\n            color: [0, 0, 0, 0.5],\r\n            outline: null,\r\n        };\r\n\r\n        this.extentGraphic = new Graphic({\r\n            symbol,\r\n        });\r\n        this.overview.graphics.add(this.extentGraphic);\r\n    }\r\n}\r\n","import Basemap from '@arcgis/core/Basemap';\r\nimport MapView from '@arcgis/core/views/MapView';\r\nimport BasemapGallery from '@arcgis/core/widgets/BasemapGallery';\r\nimport LocalBasemapsSource from '@arcgis/core/widgets/BasemapGallery/support/LocalBasemapsSource';\r\nimport CoordinateConversion from '@arcgis/core/widgets/CoordinateConversion';\r\nimport Conversion from '@arcgis/core/widgets/CoordinateConversion/support/Conversion';\r\nimport Format from '@arcgis/core/widgets/CoordinateConversion/support/Format';\r\nimport Expand from '@arcgis/core/widgets/Expand';\r\nimport LayerList from '@arcgis/core/widgets/LayerList';\r\nimport Overview from '../widgets/Overview';\r\n\r\nexport default class WidgetUtils {\r\n\r\n    static addOverview(basemap: Basemap, view: MapView, scales: number[], factor: number, display: 'collapsed' | 'expanded'): void {\r\n        const overview = new Overview({\r\n            basemap,\r\n            mainView: view,\r\n            scales,\r\n            factor,\r\n        });\r\n        const overviewExpand = new Expand({\r\n            expandIconClass: 'esri-icon-maps',\r\n            view,\r\n            content: overview,\r\n            expanded: display === 'expanded',\r\n            mode: 'floating',\r\n            autoCollapse: false,\r\n            group: 'api',\r\n        });\r\n        overview.expand = overviewExpand;\r\n        view.ui.add(overviewExpand, {\r\n            position: 'bottom-right',\r\n        });\r\n    }\r\n\r\n    static addLayerList(view: MapView, display: 'collapsed' | 'expanded'): void {\r\n        const layerList = new LayerList({\r\n            view,\r\n        });\r\n        const layerListExpand = new Expand({\r\n            expandIconClass: 'esri-icon-layers',\r\n            view,\r\n            content: layerList,\r\n            expanded: display === 'expanded',\r\n            mode: 'floating',\r\n            autoCollapse: false,\r\n            group: 'api',\r\n        });\r\n        view.ui.add(layerListExpand, {\r\n            position: 'top-right',\r\n        });\r\n    }\r\n\r\n    static addBasemapGallery(items: Basemap[], view: MapView): void {\r\n        const basemapGallery = new BasemapGallery({\r\n            source: new LocalBasemapsSource({\r\n                basemaps: items,\r\n            }),\r\n            view,\r\n        });\r\n\r\n        // redéfinition de la fonction qui compare les basemaps pour que la basemap courante soit sélevtionée dans la liste\r\n        // la fonction de base tient uniquement compte de l'url et comme elles sont identiques pour les différents services de l'asit\r\n        // tous les éléments de l'asit sont sélectionnés lorque la base base active vient de l'asit\r\n        basemapGallery.viewModel.basemapEquals = (a, b) => a.id === b.id;\r\n\r\n        const basemapGalleryExpand = new Expand({\r\n            expandIconClass: 'esri-icon-basemap',\r\n            view,\r\n            content: basemapGallery,\r\n            mode: 'floating',\r\n            autoCollapse: true,\r\n            group: 'api',\r\n        });\r\n        view.ui.add(basemapGalleryExpand, {\r\n            position: 'top-right',\r\n        });\r\n    }\r\n\r\n    static addCoordinates(view: MapView, display: 'collapsed' | 'expanded'): void {\r\n        const coords = new CoordinateConversion({\r\n            view,\r\n        });\r\n        coords.visibleElements = {\r\n            expandButton: false,\r\n        };\r\n\r\n        coords.when(() => {\r\n            const div = document.getElementsByClassName('esri-coordinate-conversion')[0] as HTMLElement;\r\n            div.style.width = '300px';\r\n\r\n            // copie du format basemap pour pouvoir donner un autre nom\r\n            const basemap = coords.formats.find((f) => f.name === 'basemap');\r\n            const mn95 = new Format({\r\n                name: 'mn95',\r\n                coordinateSegments: basemap.coordinateSegments,\r\n                spatialReference: basemap.spatialReference,\r\n            });\r\n\r\n            // ajout du format MN95 par défaut\r\n            coords.formats = coords.formats.filter((f) => f.name === 'dd');\r\n            coords.formats.add(mn95, 0);\r\n            coords.conversions.removeAll();\r\n            const conversion = new Conversion({\r\n                format: mn95,\r\n            });\r\n            coords.conversions.add(conversion);\r\n        });\r\n\r\n        const coordsExpand = new Expand({\r\n            expandIconClass: 'esri-icon-locate',\r\n            view,\r\n            content: coords,\r\n            expanded: display === 'expanded',\r\n            mode: 'floating',\r\n            autoCollapse: false,\r\n            group: 'api',\r\n        });\r\n        view.ui.add(coordsExpand, {\r\n            position: 'bottom-right',\r\n        });\r\n    }\r\n\r\n}\r\n","import Extent from '@arcgis/core/geometry/Extent';\r\nimport Geometry from '@arcgis/core/geometry/Geometry';\r\nimport MultiPoint from '@arcgis/core/geometry/MultiPoint';\r\nimport Point from '@arcgis/core/geometry/Point';\r\nimport SpatialReference from '@arcgis/core/geometry/SpatialReference';\r\nimport Graphic from '@arcgis/core/Graphic';\r\nimport GraphicsLayer from '@arcgis/core/layers/GraphicsLayer';\r\nimport TileInfo from '@arcgis/core/layers/support/TileInfo';\r\nimport Map from '@arcgis/core/Map';\r\nimport MapView from '@arcgis/core/views/MapView';\r\nimport ScaleBar from '@arcgis/core/widgets/ScaleBar';\r\nimport { Emitter } from 'nanoevents';\r\nimport { ConfigItem } from './types/ConfigItem';\r\nimport { MarkerParams } from './types/MarkerParams';\r\nimport GpxUtils from './utils/GpxUtils';\r\nimport LayerUtils from './utils/LayerUtils';\r\nimport TextUtils from './utils/TextUtils';\r\nimport WidgetUtils from './utils/WidgetUtils';\r\n\r\nexport default class MapClass {\r\n    private view: MapView;\r\n    private layerUtils: LayerUtils;\r\n\r\n    constructor(public config: ConfigItem) {\r\n        this.layerUtils = new LayerUtils(config);\r\n    }\r\n\r\n    init(emitter: Emitter): void {\r\n        const basemaps = this.layerUtils.getBasemaps(this.config.basemaps);\r\n        const map = new Map({\r\n            basemap: basemaps[0],\r\n        });\r\n        const spatialReference = new SpatialReference({\r\n            wkid: this.config.spatialReference,\r\n        });\r\n        const center = new Point({\r\n            x: this.config.center[0],\r\n            y: this.config.center[1],\r\n            spatialReference,\r\n        });\r\n        const tileInfo = TileInfo.create({\r\n            spatialReference,\r\n            numLODs: this.config.scales.length,\r\n            scales: this.config.scales,\r\n        });\r\n        const extent = new Extent({\r\n            xmin: this.config.globalExtent.xmin,\r\n            ymin: this.config.globalExtent.ymin,\r\n            xmax: this.config.globalExtent.xmax,\r\n            ymax: this.config.globalExtent.ymax,\r\n            spatialReference,\r\n        });\r\n        this.view = new MapView({\r\n            container: this.config.container,\r\n            map,\r\n            scale: this.config.scale,\r\n            center,\r\n            spatialReference,\r\n            constraints: {\r\n                rotationEnabled: false,\r\n                lods: tileInfo.lods,\r\n                minScale: this.config.minScale,\r\n                maxScale: this.config.maxScale,\r\n                geometry: extent,\r\n            },\r\n            popup: {\r\n                dockEnabled: true,\r\n                dockOptions: {\r\n                    buttonEnabled: false,\r\n                    breakpoint: false,\r\n                },\r\n                viewModel: {\r\n                    includeDefaultActions: false,\r\n                },\r\n            },\r\n        });\r\n        this.view.when(() => {\r\n            emitter.emit('map-created');\r\n        });\r\n\r\n        // barre d'échelle\r\n        const scaleBar = new ScaleBar({\r\n            view: this.view,\r\n            unit: 'metric',\r\n        });\r\n        this.view.ui.add(scaleBar, {\r\n            position: 'bottom-left',\r\n        });\r\n\r\n        // ajout des couches vecteur\r\n        if (this.config.layers) {\r\n            this.layerUtils.getFeatureLayers(this.config.layers).then((layers) => {\r\n                this.view.map.addMany(layers.reverse());\r\n            });\r\n        }\r\n\r\n        // ajout des widgets\r\n        if (basemaps.length > 1) {\r\n            WidgetUtils.addBasemapGallery(basemaps, this.view);\r\n        }\r\n        if (this.config.layerList) {\r\n            WidgetUtils.addLayerList(this.view, this.config.layerList);\r\n        }\r\n        if (this.config.overviewDisplay && this.config.overviewBasemap) {\r\n            const overviewBasemap = this.layerUtils.getBasemaps([this.config.overviewBasemap])[0];\r\n            WidgetUtils.addOverview(overviewBasemap, this.view, this.config.scales, this.config.overviewFactor as number, this.config.overviewDisplay);\r\n        }\r\n        if (this.config.showCoords) {\r\n            WidgetUtils.addCoordinates(this.view, this.config.showCoords);\r\n        }\r\n\r\n        // gestion du ctrl + click\r\n        this.view.on('click', (e) => {\r\n            if (e.native.ctrlKey) {\r\n                e.stopPropagation();\r\n                emitter.emit('ctrlClick', [e.mapPoint.x, e.mapPoint.y]);\r\n            }\r\n        });\r\n    }\r\n\r\n    center(position: number[], scale?: number): void {\r\n        this.view.center = new Point({\r\n            x: position[0],\r\n            y: position[1],\r\n            spatialReference: this.view.spatialReference,\r\n        });\r\n        if (scale !== undefined) {\r\n            this.view.scale = scale;\r\n        }\r\n    }\r\n\r\n    centerOnObject(layer: string, ids: string[], highlight: boolean): void {\r\n        // suppression des graphiques existants\r\n        this.view.graphics.removeAll();\r\n\r\n        const queryConfig = this.config.vectorLayerQueries.filter((item) => item.layer === layer)[0];\r\n        if (!queryConfig) {\r\n            console.warn(`Invalid layer name: ${layer}`);\r\n            return;\r\n        }\r\n\r\n        this.layerUtils.queryLayer(queryConfig, ids).then((geometries) => {\r\n            if (!geometries.length) {\r\n                console.warn('No object found with this query.');\r\n                return;\r\n            }\r\n\r\n            const globalExtent = this.getGlobalExtent(geometries, 1.5);\r\n            this.view.extent = globalExtent;\r\n\r\n            if (highlight) {\r\n                const symbols = {\r\n                    point: this.config.selectionPointSymbol,\r\n                    multipoint: this.config.selectionPointSymbol,\r\n                    polyline: this.config.selectionPolylineSymbol,\r\n                    polygon: this.config.selectionPolygonSymbol,\r\n                };\r\n                geometries.forEach((geom) => {\r\n                    const gr = new Graphic({\r\n                        geometry: geom,\r\n                        symbol: symbols[geom.type],\r\n                    });\r\n                    this.view.graphics.add(gr);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    getCenterCoordinates(): number[] {\r\n        return [this.view.center.x, this.view.center.y];\r\n    }\r\n\r\n    showPopup(title: string, content: string): void {\r\n        this.view.popup.open({\r\n            title,\r\n            content,\r\n        });\r\n        // évite que les coordonnées ne soient pas visibles directement sur les petites cartes (il faut cliquer sur le titre)\r\n        this.view.popup.collapsed = false;\r\n    }\r\n\r\n    addMarker(params?: MarkerParams): void {\r\n        const symbol = this.config.markerSymbol;\r\n        if (params !== undefined && params.icon && params.size) {\r\n            symbol.url = params.icon;\r\n            symbol.width = `${params.size[0]}px`;\r\n            symbol.height = `${params.size[1]}px`;\r\n        }\r\n        const coords = params !== undefined && params.position ? params.position : this.getCenterCoordinates();\r\n        const geometry = new Point({\r\n            x: coords[0],\r\n            y: coords[1],\r\n            spatialReference: this.view.spatialReference,\r\n        });\r\n        const gr = new Graphic({\r\n            geometry,\r\n            symbol,\r\n        });\r\n        this.view.graphics.add(gr);\r\n    }\r\n\r\n    addGpxLayer(name: string, url: string, zoom: boolean): void {\r\n        if (!this.isValidLayerName(name)) {\r\n            return;\r\n        }\r\n        GpxUtils.gpxToFeatures(url, this.view.spatialReference).then((r) => {\r\n            const symbols = {\r\n                point: this.config.gpxPointSymbol,\r\n                polyline: this.config.gpxPolylineSymbol,\r\n                polygon: this.config.gpxPolygonSymbol,\r\n            };\r\n            const graphics: Graphic[] = [];\r\n            r.tracks.forEach((gr) => {\r\n                gr.symbol = symbols[gr.geometry.type];\r\n                graphics.push(gr);\r\n            });\r\n            r.waypoints.forEach((gr) => {\r\n                gr.symbol = symbols[gr.geometry.type];\r\n                graphics.push(gr);\r\n            });\r\n            this.addGraphicsLayer(graphics, name, zoom);\r\n        });\r\n    }\r\n\r\n    addTextLayer(name: string, url: string, zoom: boolean): void {\r\n        if (!this.isValidLayerName(name)) {\r\n            return;\r\n        }\r\n        TextUtils.txtToFeatures(url, this.view.spatialReference).then((features) => {\r\n            this.addGraphicsLayer(features, name, zoom);\r\n        });\r\n    }\r\n\r\n    private getGlobalExtent(geometries: Geometry[], expandFactor: number): Extent {\r\n        const getExtent = (geom: Geometry): Extent => {\r\n            const extent = geom.extent;\r\n            if (extent && extent.width && extent.height) {\r\n                return extent.expand(expandFactor);\r\n            }\r\n\r\n            // eslint-disable-next-line no-extra-parens\r\n            const pt = geom.type === 'point' ? [(geom as Point).x, (geom as Point).y] : (geom as MultiPoint).points[0];\r\n            const size = 50;\r\n            return new Extent({\r\n                xmin: pt[0] - size,\r\n                ymin: pt[1] - size,\r\n                xmax: pt[0] + size,\r\n                ymax: pt[1] + size,\r\n                spatialReference: this.view.spatialReference,\r\n            });\r\n        };\r\n\r\n        let result!: Extent;\r\n        geometries.forEach((geom) => {\r\n            if (result) {\r\n                result.union(getExtent(geom));\r\n            } else {\r\n                result = getExtent(geom.clone());\r\n            }\r\n        });\r\n        return result.expand(expandFactor);\r\n    }\r\n\r\n    private isValidLayerName(name: string): boolean {\r\n        // test s'il y a déjà une couche avec ce nom. Si c'est le cas, on considère que le même gpx a déjà été chargé\r\n        if (this.view.map.layers.some((l) => l.title === name)) {\r\n            console.warn(`Map already contains a layer called '${name}'.`);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private addGraphicsLayer(graphics: Graphic[], name: string, zoom: boolean): void {\r\n        const layer = new GraphicsLayer({\r\n            title: name,\r\n        });\r\n        this.view.map.add(layer);\r\n        layer.graphics.addMany(graphics);\r\n        if (zoom) {\r\n            const geometries = graphics.map((f) => f.geometry);\r\n            const extent = this.getGlobalExtent(geometries, 1.5);\r\n            this.view.extent = extent;\r\n        }\r\n    }\r\n\r\n}\r\n","import esriRequest from '@arcgis/core/request';\r\nimport { BasemapItem, ConfigItem } from '../types/ConfigItem';\r\nimport { MapControlParams } from '../types/MapControlParams';\r\n\r\nexport class ConfigUtils {\r\n\r\n    static getConfig(params: MapControlParams): Promise<ConfigItem> {\r\n        return new Promise((resolve, reject) => {\r\n            esriRequest(params.configUrl, {\r\n                responseType: 'json',\r\n            }).then((r) => {\r\n                const config = r.data;\r\n\r\n                let overviewBasemap: BasemapItem | undefined = undefined;\r\n                let overviewFactor: number | undefined = undefined;\r\n                let overviewDisplay: 'collapsed' | 'expanded' | undefined;\r\n                if (params.miniMap !== undefined) {\r\n                    overviewDisplay = params.miniMap;\r\n                    const basemap = this.getBasemap(config.basemaps, config.overviewBasemap);\r\n                    if (basemap) {\r\n                        overviewBasemap = basemap;\r\n                    }\r\n                    overviewFactor = config.overviewFactor;\r\n                }\r\n                let layerList: 'collapsed' | 'expanded' | undefined;\r\n                if (params.layerList !== undefined && params.layers && params.layers.length) {\r\n                    layerList = params.layerList;\r\n                }\r\n                let vectorServiceUrl: string = config.vectorServiceUrl;\r\n                if (vectorServiceUrl.substring(vectorServiceUrl.length - 1) === '/') {\r\n                    vectorServiceUrl = vectorServiceUrl.substring(0, vectorServiceUrl.length - 1);\r\n                }\r\n\r\n                resolve({\r\n                    apiUrl: config.apiUrl,\r\n                    basemaps: this.getBasemaps(config, params),\r\n                    center: params.center || config.center,\r\n                    container: params.container,\r\n                    globalExtent: config.globalExtent,\r\n                    gpxPointSymbol: config.gpxPointSymbol,\r\n                    gpxPolylineSymbol: config.gpxPolylineSymbol,\r\n                    gpxPolygonSymbol: config.gpxPolygonSymbol,\r\n                    layers: params.layers,\r\n                    layerList,\r\n                    markerSymbol: config.markerSymbol,\r\n                    maxScale: config.maxScale,\r\n                    minScale: config.minScale,\r\n                    overviewBasemap,\r\n                    overviewDisplay,\r\n                    overviewFactor,\r\n                    scale: params.scale || config.scale,\r\n                    scales: config.scales,\r\n                    selectionPointSymbol: config.selectionPointSymbol,\r\n                    selectionPolylineSymbol: config.selectionPolylineSymbol,\r\n                    selectionPolygonSymbol: config.selectionPolygonSymbol,\r\n                    spatialReference: config.spatialReference,\r\n                    showCoords: params.showCoords,\r\n                    vectorLayerQueries: config.vectorLayerQueries,\r\n                    vectorServiceUrl,\r\n                    vectorServiceToken: config.vectorServiceToken,\r\n                });\r\n            }).catch((error) => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n\r\n    private static getBasemaps(config, params: MapControlParams): BasemapItem[] {\r\n        const result: BasemapItem[] = [];\r\n        if (params.basemaps === undefined) {\r\n            const basemap = this.getBasemap(config.basemaps, config.defaultBasemap, config.copyright);\r\n            if (basemap) {\r\n                result.push(basemap);\r\n            }\r\n        } else {\r\n            params.basemaps.forEach((bm) => {\r\n                const basemap = this.getBasemap(config.basemaps, bm, config.copyright);\r\n                if (basemap) {\r\n                    result.push(basemap);\r\n                }\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private static getBasemap(basemaps, name: string, copyright?: string): BasemapItem | null {\r\n        const basemap = basemaps[name];\r\n        if (!basemap) {\r\n            console.warn(`Invalid basemap name: ${name}`);\r\n            return null;\r\n        }\r\n        return {\r\n            alias: basemap.alias,\r\n            copyright,\r\n            layerId: basemap.layerId,\r\n            name,\r\n            thumbnailUrl: basemap.thumbnailUrl,\r\n            type: basemap.type,\r\n            url: basemap.url,\r\n            urlTemplate: basemap.urlTemplate,\r\n        };\r\n    }\r\n}\r\n","import esriConfig from '@arcgis/core/config';\r\nimport { createNanoEvents, Emitter } from 'nanoevents';\r\nimport MapClass from './MapClass';\r\nimport { MapControlParams } from './types/MapControlParams';\r\nimport { MarkerParams } from './types/MarkerParams';\r\nimport { ConfigUtils } from './utils/ConfigUtils';\r\n//import * as intl from '@arcgis/core/intl';\r\n\r\ninterface Events {\r\n    ctrlClick: (position: number[]) => void;\r\n}\r\n\r\nexport default class MapControl {\r\n    private map: MapClass;\r\n    private emitter: Emitter;\r\n\r\n    /**\r\n     * MapControl constructor\r\n     * @param params Map parameters\r\n     */\r\n    constructor(params: MapControlParams) {\r\n        this.emitter = createNanoEvents<Events>();\r\n\r\n        ConfigUtils.getConfig(params).then((config) => {\r\n            let apiUrl = config.apiUrl;\r\n            if (apiUrl.charAt(apiUrl.length - 1) !== '/') {\r\n                apiUrl += '/';\r\n            }\r\n            esriConfig.assetsPath = `${apiUrl}@arcgis/core/assets`;\r\n            \r\n            const css = document.createElement('link');\r\n            css.setAttribute('rel', 'stylesheet');\r\n            css.setAttribute('type', 'text/css');\r\n            css.setAttribute('href', `${apiUrl}@arcgis/core/assets/esri/themes/light/main.css`);\r\n            document.getElementsByTagName('head')[0].appendChild(css);\r\n\r\n            //intl.setLocale('fr');\r\n            this.map = new MapClass(config);\r\n            this.map.init(this.emitter);\r\n        }).catch((error) => {\r\n            console.error(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Listen on events\r\n     * @param event Event name\r\n     * @param callback Callback function\r\n     */\r\n    on<E extends keyof Events>(event: E, callback: Events[E]) {\r\n        return this.emitter.on(event, callback);\r\n    }\r\n\r\n    /**\r\n     * Center the map on a new location\r\n     * @param position Coordinates of the center\r\n     * @param scale Scale\r\n     */\r\n    center(position: number[], scale?: number): void {\r\n        this.callMapFunction(() => this.map.center(position, scale));\r\n    }\r\n\r\n    /**\r\n     * Center the map on one or more objects\r\n     * @param layer Layer name\r\n     * @param ids Ids of the objects\r\n     * @param highlight Highlight the object or not\r\n     */\r\n    centerOnObject(layer: string, ids: string[], highlight: boolean): void {\r\n        this.callMapFunction(() => this.map.centerOnObject(layer, ids, highlight));\r\n    }\r\n\r\n    /**\r\n     * Add a GPX layer on the map\r\n     * @param name Name of the layer visible in the layer list control\r\n     * @param url Url of the gpx file\r\n     */\r\n    addGpxLayer(name: string, url: string, zoom: boolean): void {\r\n        this.callMapFunction(() => this.map.addGpxLayer(name, url, zoom));\r\n    }\r\n\r\n    /**\r\n     * Add a layer from a text file on the map\r\n     * @param name Name of the layer visible in the layer list control\r\n     * @param url Url of the text file\r\n     */\r\n    addTextLayer(name: string, url: string, zoom: boolean): void {\r\n        this.callMapFunction(() => this.map.addTextLayer(name, url, zoom));\r\n    }\r\n\r\n    /**\r\n     * Add a marker on the map\r\n     * @param params Marker parameters\r\n     */\r\n    addMarker(params?: MarkerParams): void {\r\n        this.callMapFunction(() => this.map.addMarker(params));\r\n    }\r\n\r\n    /**\r\n     * Display a popup on the map\r\n     * @param title Title of the popup\r\n     * @param content Content of the popup\r\n     */\r\n    showPopup(title: string, content: string): void {\r\n        this.map.showPopup(title, content);\r\n    }\r\n\r\n    private callMapFunction(fct): void {\r\n        if (this.map) {\r\n            fct();\r\n        } else {\r\n            this.emitter.on('map-created', () => fct());\r\n        }\r\n    }\r\n\r\n}\r\n"],"names":["__decorateClass","property","subclass"],"mappings":"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"}