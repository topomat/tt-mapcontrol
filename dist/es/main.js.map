{"version":3,"file":"main.js","sources":["../../node_modules/nanoevents/index.js","../../src/utils/GpxUtils.ts","../../src/utils/SwissTileLayer.ts","../../src/utils/LayerUtils.ts","../../src/utils/TextUtils.ts","../../src/widgets/Overview.tsx","../../src/utils/WidgetUtils.ts","../../src/MapClass.ts","../../src/utils/ConfigUtils.ts","../../src/MapControl.ts"],"sourcesContent":["export let createNanoEvents = () => ({\n  emit(event, ...args) {\n    let callbacks = this.events[event] || []\n    for (let i = 0, length = callbacks.length; i < length; i++) {\n      callbacks[i](...args)\n    }\n  },\n  events: {},\n  on(event, cb) {\n    this.events[event]?.push(cb) || (this.events[event] = [cb])\n    return () => {\n      this.events[event] = this.events[event]?.filter(i => cb !== i)\n    }\n  }\n})\n","import Geometry from '@arcgis/core/geometry/Geometry';\r\nimport Point from '@arcgis/core/geometry/Point';\r\nimport Polyline from '@arcgis/core/geometry/Polyline';\r\nimport * as projection from '@arcgis/core/geometry/projection';\r\nimport SpatialReference from '@arcgis/core/geometry/SpatialReference';\r\nimport Graphic from '@arcgis/core/Graphic';\r\nimport esriRequest from '@arcgis/core/request';\r\n\r\ntype GpxContent = {\r\n    waypoints: Graphic[];\r\n    tracks: Graphic[];\r\n}\r\n\r\nexport default class GpxUtils {\r\n\r\n    static gpxToFeatures(url: string, spatialReference: SpatialReference): Promise<GpxContent> {\r\n        return new Promise((resolve) => {\r\n            esriRequest(url, {\r\n                responseType: 'xml',\r\n            }).then((r) => {\r\n                const xml = r.data;\r\n                projection.load().then(() => {\r\n                    const result: GpxContent = {\r\n                        waypoints: [],\r\n                        tracks: [],\r\n                    };\r\n                    xml.querySelectorAll('wpt').forEach((waypoint, i) => {\r\n                        const wPt = new Point({ latitude: waypoint.attributes.lat.value, longitude: waypoint.attributes.lon.value });\r\n                        const gr = this.getGraphic(wPt, waypoint, `waypoint ${i + 1}`, spatialReference);\r\n                        result.waypoints.push(gr);\r\n                    });\r\n                    xml.querySelectorAll('trk').forEach((track, i) => {\r\n                        const polyline = new Polyline({ paths: [], spatialReference: { wkid: 4326 } });\r\n                        track.querySelectorAll('trkseg').forEach((segment) => {\r\n                            const path: Point[] = [];\r\n                            const points = segment.querySelectorAll('trkpt');\r\n                            points.forEach((point) => {\r\n                                const pt = new Point({ latitude: point.attributes.lat.value, longitude: point.attributes.lon.value });\r\n                                path.push(pt);\r\n                            });\r\n                            polyline.addPath(path);\r\n                        });\r\n                        const gr = this.getGraphic(polyline, track, `track ${i + 1}`, spatialReference);\r\n                        result.tracks.push(gr);\r\n                    });\r\n                    xml.querySelectorAll('rte').forEach((route, i) => {\r\n                        const polyline = new Polyline({ paths: [], spatialReference: { wkid: 4326 } });\r\n                        const path: Point[] = [];\r\n                        route.querySelectorAll('rtept').forEach((point) => {\r\n                            const pt = new Point({ latitude: point.attributes.lat.value, longitude: point.attributes.lon.value });\r\n                            path.push(pt);\r\n                        });\r\n                        polyline.addPath(path);\r\n                        const gr = this.getGraphic(polyline, route, `route ${i + 1}`, spatialReference);\r\n                        result.tracks.push(gr);\r\n                    });\r\n                    resolve(result);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    private static getGraphic(geom: Geometry, node: any, defaultName: string, spatialReference: SpatialReference): Graphic {\r\n        const n = node.querySelector('name');\r\n        let name = defaultName;\r\n        if (n) {\r\n            name = n.textContent;\r\n        }\r\n        const d = node.querySelector('desc');\r\n        let description = '';\r\n        if (d) {\r\n            description = d.textContent;\r\n        }\r\n        const popupTemplate = {\r\n            title: name,\r\n            content: description,\r\n        };\r\n        return new Graphic({\r\n            geometry: projection.project(geom, spatialReference) as Geometry,\r\n            popupTemplate,\r\n        });\r\n    }\r\n}\r\n","import { property } from '@arcgis/core/core/accessorSupport/decorators/property';\r\nimport { subclass } from '@arcgis/core/core/accessorSupport/decorators/subclass';\r\nimport Point from '@arcgis/core/geometry/Point';\r\nimport SpatialReference from '@arcgis/core/geometry/SpatialReference';\r\nimport BaseTileLayer from '@arcgis/core/layers/BaseTileLayer';\r\nimport TileInfo from '@arcgis/core/layers/support/TileInfo';\r\n\r\n@subclass('esri.layers.SwissTileLayer')\r\nexport default class SwissTileLayer extends BaseTileLayer {\r\n\r\n    @property()\r\n    // eslint-disable-next-line indent\r\n    urlTemplate: string;\r\n\r\n    constructor(params) {\r\n        super();\r\n        const spatialReference = new SpatialReference({\r\n            wkid: 2056,\r\n        });\r\n        const tileInfo = TileInfo.create({\r\n            spatialReference,\r\n            numLODs: params.scales.length,\r\n            scales: params.scales,\r\n        });\r\n        tileInfo.origin = new Point({\r\n            x: 2420000,\r\n            y: 1350000,\r\n            spatialReference,\r\n        });\r\n        this.title = params.title;\r\n        this.urlTemplate = params.urlTemplate;\r\n        this.spatialReference = spatialReference;\r\n        this.tileInfo = tileInfo;\r\n    }\r\n\r\n    getTileUrl(level: number, row: number, col: number): string {\r\n        return this.urlTemplate\r\n            .replace('{level}', level.toString())\r\n            .replace('{col}', col.toString())\r\n            .replace('{row}', row.toString());\r\n    }\r\n\r\n}\r\n","import Basemap from '@arcgis/core/Basemap';\r\nimport Geometry from '@arcgis/core/geometry/Geometry';\r\nimport esriId from '@arcgis/core/identity/IdentityManager';\r\nimport FeatureLayer from '@arcgis/core/layers/FeatureLayer';\r\nimport ImageryLayer from '@arcgis/core/layers/ImageryLayer';\r\nimport MapImageLayer from '@arcgis/core/layers/MapImageLayer';\r\nimport Layer from '@arcgis/core/layers/Layer';\r\nimport TileLayer from '@arcgis/core/layers/TileLayer';\r\nimport VectorTileLayer from '@arcgis/core/layers/VectorTileLayer';\r\nimport WMTSLayer from '@arcgis/core/layers/WMTSLayer';\r\nimport SwissTileLayer from './SwissTileLayer';\r\nimport esriRequest from '@arcgis/core/request';\r\nimport * as query from '@arcgis/core/rest/query';\r\nimport { BasemapItem, ConfigItem, LayerQueryItem } from '../types/ConfigItem';\r\n\r\nexport default class LayerUtils {\r\n    private serviceDescription = null;\r\n    private config: ConfigItem;\r\n    private serviceUrl: string;\r\n\r\n    constructor(config: ConfigItem) {\r\n        this.config = config;\r\n        this.serviceUrl = config.vectorServiceUrl;\r\n        const token = config.vectorServiceToken;\r\n        esriId.registerToken({\r\n            token,\r\n            server: `${this.serviceUrl.split('/rest/services')[0]}/rest/services`,\r\n        });\r\n    }\r\n\r\n    getFeatureLayers(layers: string[]): Promise<FeatureLayer[]> {\r\n        return new Promise((resolve) => {\r\n            this.getServiceDescription().then((r) => {\r\n                const featureLayers: FeatureLayer[] = [];\r\n                r.layers.forEach((l) => {\r\n                    if (layers.includes(l.name)) {\r\n                        const featureLayer = new FeatureLayer({\r\n                            url: `${this.serviceUrl}/${l.id}`,\r\n                            title: l.name,\r\n                        });\r\n                        featureLayer.on('layerview-create', (e) => {\r\n                            const fLayer = e.layerView.layer as FeatureLayer;\r\n                            fLayer.popupTemplate = fLayer.createPopupTemplate();\r\n                            // requête si le champ pricipal est une expression Arcade\r\n                            /*esriRequest(url, {\r\n                                query: {\r\n                                    f: 'json',\r\n                                },\r\n                                responseType: 'json',\r\n                            }).then((r2) => {\r\n                                // r2.displayFieldExpressionInfo contient \"$feature.VOIE_TXT + \\\" \\\" + $feature.NO_ENTREE + \\\", \\\" + $feature.CODEPOST_4 + \\\" \\\" + $feature.LOCALITE;\"\r\n                                // il faudrait convertir cela dans la chaîne ci-dessous\r\n                                //fLayer.popupTemplate.title = '{VOIE_TXT} {NO_ENTREE}, {CODEPOST_4} {LOCALITE};';\r\n                            });*/\r\n                        });\r\n                        featureLayers.push(featureLayer);\r\n                    }\r\n                });\r\n                resolve(featureLayers);\r\n            });\r\n        });\r\n    }\r\n\r\n    async getMapImageLayers(layers: string[]): Promise<MapImageLayer[]> {\r\n        const mapImageLayers: MapImageLayer[] = [];\r\n        const r = await this.getServiceDescription();\r\n        r.layers.forEach((l) => {\r\n            if (layers.includes(l.name)) {\r\n                const layer = new MapImageLayer({\r\n                    title: l.name,\r\n                    url: this.serviceUrl,\r\n                    listMode: 'hide-children',\r\n                    sublayers: [{\r\n                        id: l.id,\r\n                        visible: true,\r\n                    }],\r\n                });\r\n                const sublayer = layer.sublayers.at(0);\r\n                sublayer.load().then(() => {\r\n                    sublayer.popupEnabled = true;\r\n                    sublayer.popupTemplate = sublayer.createPopupTemplate();\r\n                    sublayer.popupTemplate.title = `${l.name}: {${sublayer.sourceJSON.displayField}}`;\r\n                    \r\n                });\r\n                mapImageLayers.push(layer);\r\n            }\r\n        });\r\n        return mapImageLayers;\r\n    }\r\n\r\n    queryLayer(layerQuery: LayerQueryItem, ids: string[]): Promise<Geometry[]> {\r\n        return new Promise((resolve) => {\r\n            this.getServiceDescription().then((r) => {\r\n                const layerInfo = r.layers.filter((l) => l.name === layerQuery.layer)[0];\r\n                if (!layerInfo) {\r\n                    console.warn(`Invalid layer name in config file: ${layerQuery.layer}`);\r\n                    resolve([]);\r\n                    return;\r\n                }\r\n                query.executeQueryJSON(`${this.serviceUrl}/${layerInfo.id}`, {\r\n                    where: `${layerQuery.field} in ('${ids.join('\\',\\'')}')`,\r\n                    returnGeometry: true,\r\n                }).then((r2) => {\r\n                    resolve(r2.features.map((f) => f.geometry));\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    getBasemaps(basemapItems: BasemapItem[]): Basemap[] {\r\n        const result: Basemap[] = [];\r\n        basemapItems.forEach((item) => {\r\n            const layer = this.getLayer(item);\r\n            if (layer) {\r\n                result.push(new Basemap({\r\n                    baseLayers: [layer],\r\n                    title: item.alias,\r\n                    thumbnailUrl: item.thumbnailUrl,\r\n                }));\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    private getServiceDescription(): Promise<any> {\r\n        return new Promise((resolve) => {\r\n            if (this.serviceDescription === null) {\r\n                esriRequest(this.serviceUrl, {\r\n                    query: {\r\n                        f: 'json',\r\n                    },\r\n                    responseType: 'json',\r\n                }).then((r) => {\r\n                    this.serviceDescription = r.data;\r\n                    resolve(this.serviceDescription);\r\n                });\r\n            } else {\r\n                resolve(this.serviceDescription);\r\n            }\r\n        });\r\n    }\r\n\r\n    private getLayer(params: BasemapItem): Layer | null {\r\n        switch (params.type) {\r\n            case 'tile':\r\n                return new SwissTileLayer({\r\n                    title: params.alias,\r\n                    urlTemplate: params.urlTemplate,\r\n                    scales: this.config.scales,\r\n                });\r\n            case 'wmts':\r\n                return new WMTSLayer({\r\n                    url: params.url,\r\n                    activeLayer: {\r\n                        id: params.layerId,\r\n                    },\r\n                    copyright: params.copyright,\r\n                });\r\n            case 'mapservice':\r\n                return new TileLayer({\r\n                    url: params.url,\r\n                    copyright: params.copyright,\r\n                });\r\n            case 'imageservice':\r\n                return new ImageryLayer({\r\n                    url: params.url,\r\n                    copyright: params.copyright,\r\n                });\r\n            case 'vectortile':\r\n                return new VectorTileLayer({\r\n                    url: params.url,\r\n                });\r\n            default:\r\n                console.warn(`Unsupported basemap type: ${params.type}`);\r\n                return null;\r\n        }\r\n    }\r\n\r\n}\r\n","import Point from '@arcgis/core/geometry/Point';\r\nimport SpatialReference from '@arcgis/core/geometry/SpatialReference';\r\nimport Graphic from '@arcgis/core/Graphic';\r\nimport esriRequest from '@arcgis/core/request';\r\nimport PictureMarkerSymbol from '@arcgis/core/symbols/PictureMarkerSymbol';\r\n\r\nexport default class TextUtils {\r\n\r\n    static txtToFeatures(url: string, spatialReference: SpatialReference): Promise<Graphic[]> {\r\n        return new Promise((resolve) => {\r\n            esriRequest(url, {\r\n                responseType: 'text',\r\n            }).then((r) => {\r\n                const graphics: Graphic[] = [];\r\n                r.data.split('\\n').forEach((row: string, index: number) => {\r\n                    if (index) { // la première ligne contient le nom des champs\r\n                        const parts = row.split('\\t');\r\n                        if (parts.length >= 5) {\r\n                            const coords = parts[0].split(',');\r\n                            const geometry = new Point({ x: parseFloat(coords[1]), y: parseFloat(coords[0]), spatialReference });\r\n                            const popupTemplate = {\r\n                                title: parts[1],\r\n                                content: parts[2],\r\n                            };\r\n                            const symbolSize = parts[4].split(',');\r\n                            const symbol = new PictureMarkerSymbol({\r\n                                url: parts[3],\r\n                                width: `${symbolSize[0]}px`,\r\n                                height: `${symbolSize[1]}px`,\r\n                            });\r\n                            graphics.push(new Graphic({\r\n                                geometry,\r\n                                symbol,\r\n                                popupTemplate,\r\n                            }));\r\n                        }\r\n                    }\r\n                });\r\n                resolve(graphics);\r\n            });\r\n        });\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport Basemap from '@arcgis/core/Basemap';\r\nimport { property, subclass } from '@arcgis/core/core/accessorSupport/decorators';\r\nimport * as reactiveUtils from '@arcgis/core/core/reactiveUtils';\r\nimport Graphic from '@arcgis/core/Graphic';\r\nimport TileInfo from '@arcgis/core/layers/support/TileInfo';\r\nimport Map from '@arcgis/core/Map';\r\nimport MapView from '@arcgis/core/views/MapView';\r\nimport Expand from '@arcgis/core/widgets/Expand';\r\nimport { tsx } from '@arcgis/core/widgets/support/widget';\r\nimport Widget from '@arcgis/core/widgets/Widget';\r\n\r\ninterface OverviewParams extends __esri.WidgetProperties {\r\n    basemap: Basemap;\r\n    mainView: MapView;\r\n    scales: number[];\r\n    factor: number;\r\n}\r\n\r\n@subclass('esri.widgets.Overview')\r\nexport default class Overview extends Widget {\r\n    private overview: MapView;\r\n    private extentGraphic: Graphic;\r\n    private mainView: MapView;\r\n    private basemap: Basemap;\r\n    private scales: number[];\r\n    private factor: number;\r\n\r\n    constructor(params?: OverviewParams) {\r\n        super(params);\r\n    }\r\n\r\n    postInitialize() {\r\n        reactiveUtils.watch(() => [this.mainView.center, this.mainView.interacting, this.mainView.scale], () => {\r\n            this.onViewChange();\r\n        });\r\n    }\r\n\r\n    @property()\r\n        expand: Expand;\r\n\r\n    render() {\r\n        setTimeout(() => {\r\n            if (this.expand.expanded) {\r\n                this.onViewChange();\r\n            }\r\n        }, 10);\r\n        return <div id={`${this.id}_cont`} style=\"width:250px;height:150px;background:#fff\"></div>;\r\n    }\r\n\r\n    private onViewChange(): void {\r\n        if (this.expand.expanded) {\r\n            if (!this.overview && document.getElementById(`${this.id}_cont`)) {\r\n                this.createMap();\r\n                this.createExtentGraphic();\r\n            }\r\n            if (this.overview) {\r\n                this.overview.center = this.mainView.center;\r\n                this.overview.scale = this.mainView.scale * this.factor;\r\n                this.extentGraphic.geometry = this.mainView.extent;\r\n            }\r\n        }\r\n    }\r\n\r\n    private createMap(): void {\r\n        const map = new Map({\r\n            basemap: this.basemap,\r\n        });\r\n        const tileInfo = TileInfo.create({\r\n            spatialReference: this.mainView.spatialReference,\r\n            numLODs: this.scales.length,\r\n            scales: this.scales,\r\n        });\r\n        this.overview = new MapView({\r\n            container: `${this.id}_cont`,\r\n            map,\r\n            scale: this.mainView.scale,\r\n            center: this.mainView.center,\r\n            spatialReference: this.mainView.spatialReference,\r\n            constraints: {\r\n                rotationEnabled: false,\r\n                lods: tileInfo.lods,\r\n            },\r\n            ui: {\r\n                components: [],\r\n            },\r\n        });\r\n        this.overview.when(() => {\r\n            const stopEvtPropagation = (event) => {\r\n                event.stopPropagation();\r\n            };\r\n            this.overview.on('mouse-wheel', stopEvtPropagation);\r\n            this.overview.on('double-click', stopEvtPropagation);\r\n            this.overview.on('double-click', ['Control'], stopEvtPropagation);\r\n            this.overview.on('drag', stopEvtPropagation);\r\n            this.overview.on('drag', ['Shift'], stopEvtPropagation);\r\n            this.overview.on('drag', ['Shift', 'Control'], stopEvtPropagation);\r\n            this.overview.on('key-down', (event) => {\r\n                const prohibitedKeys = [\r\n                    '+',\r\n                    '-',\r\n                    'Shift',\r\n                    '_',\r\n                    '=',\r\n                    'ArrowUp',\r\n                    'ArrowDown',\r\n                    'ArrowRight',\r\n                    'ArrowLeft',\r\n                ];\r\n                const keyPressed = event.key;\r\n                if (prohibitedKeys.indexOf(keyPressed) !== -1) {\r\n                    event.stopPropagation();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private createExtentGraphic(): void {\r\n        const symbol = {\r\n            type: 'simple-fill',\r\n            color: [0, 0, 0, 0.5],\r\n            outline: null,\r\n        };\r\n\r\n        this.extentGraphic = new Graphic({\r\n            symbol,\r\n        });\r\n        this.overview.graphics.add(this.extentGraphic);\r\n    }\r\n}\r\n","import Basemap from '@arcgis/core/Basemap';\r\nimport MapView from '@arcgis/core/views/MapView';\r\nimport BasemapGallery from '@arcgis/core/widgets/BasemapGallery';\r\nimport LocalBasemapsSource from '@arcgis/core/widgets/BasemapGallery/support/LocalBasemapsSource';\r\nimport CoordinateConversion from '@arcgis/core/widgets/CoordinateConversion';\r\nimport Conversion from '@arcgis/core/widgets/CoordinateConversion/support/Conversion';\r\nimport Format from '@arcgis/core/widgets/CoordinateConversion/support/Format';\r\nimport Expand from '@arcgis/core/widgets/Expand';\r\nimport LayerList from '@arcgis/core/widgets/LayerList';\r\nimport Overview from '../widgets/Overview';\r\n\r\nexport default class WidgetUtils {\r\n\r\n    static addOverview(basemap: Basemap, view: MapView, scales: number[], factor: number, display: 'collapsed' | 'expanded'): void {\r\n        const overview = new Overview({\r\n            basemap,\r\n            mainView: view,\r\n            scales,\r\n            factor,\r\n        });\r\n        const overviewExpand = new Expand({\r\n            expandIconClass: 'esri-icon-maps',\r\n            view,\r\n            content: overview,\r\n            expanded: display === 'expanded',\r\n            mode: 'floating',\r\n            autoCollapse: false,\r\n            group: 'api',\r\n        });\r\n        overview.expand = overviewExpand;\r\n        view.ui.add(overviewExpand, {\r\n            position: 'bottom-right',\r\n        });\r\n    }\r\n\r\n    static addLayerList(view: MapView, display: 'collapsed' | 'expanded'): void {\r\n        const layerList = new LayerList({\r\n            view,\r\n        });\r\n        const layerListExpand = new Expand({\r\n            expandIconClass: 'esri-icon-layers',\r\n            view,\r\n            content: layerList,\r\n            expanded: display === 'expanded',\r\n            mode: 'floating',\r\n            autoCollapse: false,\r\n            group: 'api',\r\n        });\r\n        view.ui.add(layerListExpand, {\r\n            position: 'top-right',\r\n        });\r\n    }\r\n\r\n    static addBasemapGallery(items: Basemap[], view: MapView): void {\r\n        const basemapGallery = new BasemapGallery({\r\n            source: new LocalBasemapsSource({\r\n                basemaps: items,\r\n            }),\r\n            view,\r\n        });\r\n\r\n        // redéfinition de la fonction qui compare les basemaps pour que la basemap courante soit sélevtionée dans la liste\r\n        // la fonction de base tient uniquement compte de l'url et comme elles sont identiques pour les différents services de l'asit\r\n        // tous les éléments de l'asit sont sélectionnés lorque la base base active vient de l'asit\r\n        basemapGallery.viewModel.basemapEquals = (a, b) => a.id === b.id;\r\n\r\n        const basemapGalleryExpand = new Expand({\r\n            expandIconClass: 'esri-icon-basemap',\r\n            view,\r\n            content: basemapGallery,\r\n            mode: 'floating',\r\n            autoCollapse: true,\r\n            group: 'api',\r\n        });\r\n        view.ui.add(basemapGalleryExpand, {\r\n            position: 'top-right',\r\n        });\r\n    }\r\n\r\n    static addCoordinates(view: MapView, display: 'collapsed' | 'expanded'): void {\r\n        const coords = new CoordinateConversion({\r\n            view,\r\n        });\r\n        coords.visibleElements = {\r\n            expandButton: false,\r\n        };\r\n\r\n        coords.when(() => {\r\n            const handle = setInterval(() => {\r\n                const div = document.getElementsByClassName('esri-coordinate-conversion')[0] as HTMLElement;\r\n                if (div) {\r\n                    clearInterval(handle);\r\n                    div.style.width = '300px';\r\n                }\r\n            }, 50);\r\n            \r\n            // copie du format basemap pour pouvoir donner un autre nom\r\n            const basemap = coords.formats.find((f) => f.name === 'basemap');\r\n            const mn95 = new Format({\r\n                name: 'mn95',\r\n                coordinateSegments: basemap.coordinateSegments,\r\n                spatialReference: basemap.spatialReference,\r\n            });\r\n\r\n            // ajout du format MN95 par défaut\r\n            coords.formats = coords.formats.filter((f) => f.name === 'dd');\r\n            coords.formats.add(mn95, 0);\r\n            coords.conversions.removeAll();\r\n            const conversion = new Conversion({\r\n                format: mn95,\r\n            });\r\n            coords.conversions.add(conversion);\r\n        });\r\n\r\n        const coordsExpand = new Expand({\r\n            expandIconClass: 'esri-icon-locate',\r\n            view,\r\n            content: coords,\r\n            expanded: display === 'expanded',\r\n            mode: 'floating',\r\n            autoCollapse: false,\r\n            group: 'api',\r\n        });\r\n        view.ui.add(coordsExpand, {\r\n            position: 'bottom-right',\r\n        });\r\n    }\r\n\r\n}\r\n","import Extent from '@arcgis/core/geometry/Extent';\r\nimport Geometry from '@arcgis/core/geometry/Geometry';\r\nimport MultiPoint from '@arcgis/core/geometry/MultiPoint';\r\nimport Point from '@arcgis/core/geometry/Point';\r\nimport SpatialReference from '@arcgis/core/geometry/SpatialReference';\r\nimport Graphic from '@arcgis/core/Graphic';\r\nimport GraphicsLayer from '@arcgis/core/layers/GraphicsLayer';\r\nimport TileInfo from '@arcgis/core/layers/support/TileInfo';\r\nimport Map from '@arcgis/core/Map';\r\nimport MapView from '@arcgis/core/views/MapView';\r\nimport ScaleBar from '@arcgis/core/widgets/ScaleBar';\r\nimport { Emitter } from 'nanoevents';\r\nimport { ConfigItem } from './types/ConfigItem';\r\nimport { MarkerParams } from './types/MarkerParams';\r\nimport GpxUtils from './utils/GpxUtils';\r\nimport LayerUtils from './utils/LayerUtils';\r\nimport TextUtils from './utils/TextUtils';\r\nimport WidgetUtils from './utils/WidgetUtils';\r\n\r\nexport default class MapClass {\r\n    private view: MapView;\r\n    private layerUtils: LayerUtils;\r\n\r\n    constructor(public config: ConfigItem) {\r\n        this.layerUtils = new LayerUtils(config);\r\n    }\r\n\r\n    init(emitter: Emitter): void {\r\n        const basemaps = this.layerUtils.getBasemaps(this.config.basemaps);\r\n        const map = new Map({\r\n            basemap: basemaps[0],\r\n        });\r\n        const spatialReference = new SpatialReference({\r\n            wkid: this.config.spatialReference,\r\n        });\r\n        const center = new Point({\r\n            x: this.config.center[0],\r\n            y: this.config.center[1],\r\n            spatialReference,\r\n        });\r\n        const tileInfo = TileInfo.create({\r\n            spatialReference,\r\n            numLODs: this.config.scales.length,\r\n            scales: this.config.scales,\r\n        });\r\n        const extent = new Extent({\r\n            xmin: this.config.globalExtent.xmin,\r\n            ymin: this.config.globalExtent.ymin,\r\n            xmax: this.config.globalExtent.xmax,\r\n            ymax: this.config.globalExtent.ymax,\r\n            spatialReference,\r\n        });\r\n        this.view = new MapView({\r\n            container: this.config.container,\r\n            map,\r\n            scale: this.config.scale,\r\n            center,\r\n            spatialReference,\r\n            constraints: {\r\n                rotationEnabled: false,\r\n                lods: tileInfo.lods,\r\n                minScale: this.config.minScale,\r\n                maxScale: this.config.maxScale,\r\n                geometry: extent,\r\n            },\r\n            popup: {\r\n                dockEnabled: true,\r\n                dockOptions: {\r\n                    buttonEnabled: false,\r\n                    breakpoint: false,\r\n                },\r\n                viewModel: {\r\n                    includeDefaultActions: false,\r\n                },\r\n            },\r\n        });\r\n        this.view.when(() => {\r\n            emitter.emit('map-created');\r\n        });\r\n\r\n        // barre d'échelle\r\n        const scaleBar = new ScaleBar({\r\n            view: this.view,\r\n            unit: 'metric',\r\n        });\r\n        this.view.ui.add(scaleBar, {\r\n            position: 'bottom-left',\r\n        });\r\n\r\n        // ajout des couches vecteur\r\n        if (this.config.layers) {\r\n            /*this.layerUtils.getFeatureLayers(this.config.layers).then((layers) => {\r\n                this.view.map.addMany(layers.reverse());\r\n            });*/\r\n            this.layerUtils.getMapImageLayers(this.config.layers).then((layers) => {\r\n                this.view.map.addMany(layers.reverse());\r\n            });\r\n        }\r\n\r\n        // ajout des widgets\r\n        if (basemaps.length > 1) {\r\n            WidgetUtils.addBasemapGallery(basemaps, this.view);\r\n        }\r\n        if (this.config.layerList) {\r\n            WidgetUtils.addLayerList(this.view, this.config.layerList);\r\n        }\r\n        if (this.config.overviewDisplay && this.config.overviewBasemap) {\r\n            const overviewBasemap = this.layerUtils.getBasemaps([this.config.overviewBasemap])[0];\r\n            WidgetUtils.addOverview(overviewBasemap, this.view, this.config.scales, this.config.overviewFactor as number, this.config.overviewDisplay);\r\n        }\r\n        if (this.config.showCoords) {\r\n            WidgetUtils.addCoordinates(this.view, this.config.showCoords);\r\n        }\r\n\r\n        // gestion du ctrl + click\r\n        this.view.on('click', (e) => {\r\n            if (e.native.ctrlKey) {\r\n                e.stopPropagation();\r\n                emitter.emit('ctrlClick', [e.mapPoint.x, e.mapPoint.y]);\r\n            }\r\n        });\r\n    }\r\n\r\n    center(position: number[], scale?: number): void {\r\n        this.view.center = new Point({\r\n            x: position[0],\r\n            y: position[1],\r\n            spatialReference: this.view.spatialReference,\r\n        });\r\n        if (scale !== undefined) {\r\n            this.view.scale = scale;\r\n        }\r\n    }\r\n\r\n    centerOnObject(layer: string, ids: string[], highlight: boolean): void {\r\n        // suppression des graphiques existants\r\n        this.view.graphics.removeAll();\r\n\r\n        const queryConfig = this.config.vectorLayerQueries.filter((item) => item.layer === layer)[0];\r\n        if (!queryConfig) {\r\n            console.warn(`Invalid layer name: ${layer}`);\r\n            return;\r\n        }\r\n\r\n        this.layerUtils.queryLayer(queryConfig, ids).then((geometries) => {\r\n            if (!geometries.length) {\r\n                console.warn('No object found with this query.');\r\n                return;\r\n            }\r\n\r\n            const globalExtent = this.getGlobalExtent(geometries, 1.5);\r\n            this.view.extent = globalExtent;\r\n\r\n            if (highlight) {\r\n                const symbols = {\r\n                    point: this.config.selectionPointSymbol,\r\n                    multipoint: this.config.selectionPointSymbol,\r\n                    polyline: this.config.selectionPolylineSymbol,\r\n                    polygon: this.config.selectionPolygonSymbol,\r\n                };\r\n                geometries.forEach((geom) => {\r\n                    const gr = new Graphic({\r\n                        geometry: geom,\r\n                        symbol: symbols[geom.type],\r\n                    });\r\n                    this.view.graphics.add(gr);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    getCenterCoordinates(): number[] {\r\n        return [this.view.center.x, this.view.center.y];\r\n    }\r\n\r\n    showPopup(title: string, content: string): void {\r\n        this.view.openPopup({\r\n            title,\r\n            content,\r\n        });\r\n        // évite que les coordonnées ne soient pas visibles directement sur les petites cartes (il faut cliquer sur le titre)\r\n        //this.view.popup.collapsed = false;\r\n    }\r\n\r\n    addMarker(params?: MarkerParams): void {\r\n        const symbol = this.config.markerSymbol;\r\n        if (params !== undefined && params.icon && params.size) {\r\n            symbol.url = params.icon;\r\n            symbol.width = `${params.size[0]}px`;\r\n            symbol.height = `${params.size[1]}px`;\r\n        }\r\n        const coords = params !== undefined && params.position ? params.position : this.getCenterCoordinates();\r\n        const geometry = new Point({\r\n            x: coords[0],\r\n            y: coords[1],\r\n            spatialReference: this.view.spatialReference,\r\n        });\r\n        const gr = new Graphic({\r\n            geometry,\r\n            symbol,\r\n        });\r\n        this.view.graphics.add(gr);\r\n    }\r\n\r\n    addGpxLayer(name: string, url: string, zoom: boolean): void {\r\n        if (!this.isValidLayerName(name)) {\r\n            return;\r\n        }\r\n        GpxUtils.gpxToFeatures(url, this.view.spatialReference).then((r) => {\r\n            const symbols = {\r\n                point: this.config.gpxPointSymbol,\r\n                polyline: this.config.gpxPolylineSymbol,\r\n                polygon: this.config.gpxPolygonSymbol,\r\n            };\r\n            const graphics: Graphic[] = [];\r\n            r.tracks.forEach((gr) => {\r\n                gr.symbol = symbols[gr.geometry.type];\r\n                graphics.push(gr);\r\n            });\r\n            r.waypoints.forEach((gr) => {\r\n                gr.symbol = symbols[gr.geometry.type];\r\n                graphics.push(gr);\r\n            });\r\n            this.addGraphicsLayer(graphics, name, zoom);\r\n        });\r\n    }\r\n\r\n    addTextLayer(name: string, url: string, zoom: boolean): void {\r\n        if (!this.isValidLayerName(name)) {\r\n            return;\r\n        }\r\n        TextUtils.txtToFeatures(url, this.view.spatialReference).then((features) => {\r\n            this.addGraphicsLayer(features, name, zoom);\r\n        });\r\n    }\r\n\r\n    private getGlobalExtent(geometries: Geometry[], expandFactor: number): Extent {\r\n        const getExtent = (geom: Geometry): Extent => {\r\n            const extent = geom.extent;\r\n            if (extent && extent.width && extent.height) {\r\n                return extent.expand(expandFactor);\r\n            }\r\n\r\n            // eslint-disable-next-line no-extra-parens\r\n            const pt = geom.type === 'point' ? [(geom as Point).x, (geom as Point).y] : (geom as MultiPoint).points[0];\r\n            const size = 50;\r\n            return new Extent({\r\n                xmin: pt[0] - size,\r\n                ymin: pt[1] - size,\r\n                xmax: pt[0] + size,\r\n                ymax: pt[1] + size,\r\n                spatialReference: this.view.spatialReference,\r\n            });\r\n        };\r\n\r\n        let result!: Extent;\r\n        geometries.forEach((geom) => {\r\n            if (result) {\r\n                result.union(getExtent(geom));\r\n            } else {\r\n                result = getExtent(geom.clone());\r\n            }\r\n        });\r\n        return result.expand(expandFactor);\r\n    }\r\n\r\n    private isValidLayerName(name: string): boolean {\r\n        // test s'il y a déjà une couche avec ce nom. Si c'est le cas, on considère que le même gpx a déjà été chargé\r\n        if (this.view.map.layers.some((l) => l.title === name)) {\r\n            console.warn(`Map already contains a layer called '${name}'.`);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private addGraphicsLayer(graphics: Graphic[], name: string, zoom: boolean): void {\r\n        const layer = new GraphicsLayer({\r\n            title: name,\r\n        });\r\n        this.view.map.add(layer);\r\n        layer.graphics.addMany(graphics);\r\n        if (zoom) {\r\n            const geometries = graphics.map((f) => f.geometry);\r\n            const extent = this.getGlobalExtent(geometries, 1.5);\r\n            this.view.extent = extent;\r\n        }\r\n    }\r\n\r\n}\r\n","import esriRequest from '@arcgis/core/request';\r\nimport { BasemapItem, ConfigItem } from '../types/ConfigItem';\r\nimport { MapControlParams } from '../types/MapControlParams';\r\n\r\nexport class ConfigUtils {\r\n\r\n    static getConfig(params: MapControlParams): Promise<ConfigItem> {\r\n        return new Promise((resolve, reject) => {\r\n            esriRequest(params.configUrl, {\r\n                responseType: 'json',\r\n            }).then((r) => {\r\n                const config = r.data;\r\n\r\n                let overviewBasemap: BasemapItem | undefined = undefined;\r\n                let overviewFactor: number | undefined = undefined;\r\n                let overviewDisplay: 'collapsed' | 'expanded' | undefined;\r\n                if (params.miniMap !== undefined) {\r\n                    overviewDisplay = params.miniMap;\r\n                    const basemap = this.getBasemap(config.basemaps, config.overviewBasemap);\r\n                    if (basemap) {\r\n                        overviewBasemap = basemap;\r\n                    }\r\n                    overviewFactor = config.overviewFactor;\r\n                }\r\n                let layerList: 'collapsed' | 'expanded' | undefined;\r\n                if (params.layerList !== undefined && params.layers && params.layers.length) {\r\n                    layerList = params.layerList;\r\n                }\r\n                let vectorServiceUrl: string = config.vectorServiceUrl;\r\n                if (vectorServiceUrl.substring(vectorServiceUrl.length - 1) === '/') {\r\n                    vectorServiceUrl = vectorServiceUrl.substring(0, vectorServiceUrl.length - 1);\r\n                }\r\n\r\n                resolve({\r\n                    apiUrl: config.apiUrl,\r\n                    basemaps: this.getBasemaps(config, params),\r\n                    center: params.center || config.center,\r\n                    container: params.container,\r\n                    globalExtent: config.globalExtent,\r\n                    gpxPointSymbol: config.gpxPointSymbol,\r\n                    gpxPolylineSymbol: config.gpxPolylineSymbol,\r\n                    gpxPolygonSymbol: config.gpxPolygonSymbol,\r\n                    layers: params.layers,\r\n                    layerList,\r\n                    markerSymbol: config.markerSymbol,\r\n                    maxScale: config.maxScale,\r\n                    minScale: config.minScale,\r\n                    overviewBasemap,\r\n                    overviewDisplay,\r\n                    overviewFactor,\r\n                    scale: params.scale || config.scale,\r\n                    scales: config.scales,\r\n                    selectionPointSymbol: config.selectionPointSymbol,\r\n                    selectionPolylineSymbol: config.selectionPolylineSymbol,\r\n                    selectionPolygonSymbol: config.selectionPolygonSymbol,\r\n                    spatialReference: config.spatialReference,\r\n                    showCoords: params.showCoords,\r\n                    vectorLayerQueries: config.vectorLayerQueries,\r\n                    vectorServiceUrl,\r\n                    vectorServiceToken: config.vectorServiceToken,\r\n                });\r\n            }).catch((error) => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n\r\n    private static getBasemaps(config, params: MapControlParams): BasemapItem[] {\r\n        const result: BasemapItem[] = [];\r\n        if (params.basemaps === undefined) {\r\n            const basemap = this.getBasemap(config.basemaps, config.defaultBasemap, config.copyright);\r\n            if (basemap) {\r\n                result.push(basemap);\r\n            }\r\n        } else {\r\n            params.basemaps.forEach((bm) => {\r\n                const basemap = this.getBasemap(config.basemaps, bm, config.copyright);\r\n                if (basemap) {\r\n                    result.push(basemap);\r\n                }\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private static getBasemap(basemaps, name: string, copyright?: string): BasemapItem | null {\r\n        const basemap = basemaps[name];\r\n        if (!basemap) {\r\n            console.warn(`Invalid basemap name: ${name}`);\r\n            return null;\r\n        }\r\n        return {\r\n            alias: basemap.alias,\r\n            copyright,\r\n            layerId: basemap.layerId,\r\n            name,\r\n            thumbnailUrl: basemap.thumbnailUrl,\r\n            type: basemap.type,\r\n            url: basemap.url,\r\n            urlTemplate: basemap.urlTemplate,\r\n        };\r\n    }\r\n}\r\n","import esriConfig from '@arcgis/core/config';\r\nimport { createNanoEvents, Emitter } from 'nanoevents';\r\nimport MapClass from './MapClass';\r\nimport { MapControlParams } from './types/MapControlParams';\r\nimport { MarkerParams } from './types/MarkerParams';\r\nimport { ConfigUtils } from './utils/ConfigUtils';\r\n//import * as intl from '@arcgis/core/intl';\r\n\r\ninterface Events {\r\n    ctrlClick: (position: number[]) => void;\r\n}\r\n\r\nexport default class MapControl {\r\n    private map: MapClass;\r\n    private emitter: Emitter;\r\n\r\n    /**\r\n     * MapControl constructor\r\n     * @param params Map parameters\r\n     */\r\n    constructor(params: MapControlParams) {\r\n        this.emitter = createNanoEvents<Events>();\r\n\r\n        ConfigUtils.getConfig(params).then((config) => {\r\n            let apiUrl = config.apiUrl;\r\n            if (apiUrl.charAt(apiUrl.length - 1) !== '/') {\r\n                apiUrl += '/';\r\n            }\r\n            esriConfig.assetsPath = `${apiUrl}@arcgis/core/assets`;\r\n            \r\n            const css = document.createElement('link');\r\n            css.setAttribute('rel', 'stylesheet');\r\n            css.setAttribute('type', 'text/css');\r\n            css.setAttribute('href', `${apiUrl}@arcgis/core/assets/esri/themes/light/main.css`);\r\n            document.getElementsByTagName('head')[0].appendChild(css);\r\n\r\n            //intl.setLocale('fr');\r\n            this.map = new MapClass(config);\r\n            this.map.init(this.emitter);\r\n        }).catch((error) => {\r\n            console.error(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Listen on events\r\n     * @param event Event name\r\n     * @param callback Callback function\r\n     */\r\n    on<E extends keyof Events>(event: E, callback: Events[E]) {\r\n        return this.emitter.on(event, callback);\r\n    }\r\n\r\n    /**\r\n     * Center the map on a new location\r\n     * @param position Coordinates of the center\r\n     * @param scale Scale\r\n     */\r\n    center(position: number[], scale?: number): void {\r\n        this.callMapFunction(() => this.map.center(position, scale));\r\n    }\r\n\r\n    /**\r\n     * Center the map on one or more objects\r\n     * @param layer Layer name\r\n     * @param ids Ids of the objects\r\n     * @param highlight Highlight the object or not\r\n     */\r\n    centerOnObject(layer: string, ids: string[], highlight: boolean): void {\r\n        this.callMapFunction(() => this.map.centerOnObject(layer, ids, highlight));\r\n    }\r\n\r\n    /**\r\n     * Add a GPX layer on the map\r\n     * @param name Name of the layer visible in the layer list control\r\n     * @param url Url of the gpx file\r\n     */\r\n    addGpxLayer(name: string, url: string, zoom: boolean): void {\r\n        this.callMapFunction(() => this.map.addGpxLayer(name, url, zoom));\r\n    }\r\n\r\n    /**\r\n     * Add a layer from a text file on the map\r\n     * @param name Name of the layer visible in the layer list control\r\n     * @param url Url of the text file\r\n     */\r\n    addTextLayer(name: string, url: string, zoom: boolean): void {\r\n        this.callMapFunction(() => this.map.addTextLayer(name, url, zoom));\r\n    }\r\n\r\n    /**\r\n     * Add a marker on the map\r\n     * @param params Marker parameters\r\n     */\r\n    addMarker(params?: MarkerParams): void {\r\n        this.callMapFunction(() => this.map.addMarker(params));\r\n    }\r\n\r\n    /**\r\n     * Display a popup on the map\r\n     * @param title Title of the popup\r\n     * @param content Content of the popup\r\n     */\r\n    showPopup(title: string, content: string): void {\r\n        this.map.showPopup(title, content);\r\n    }\r\n\r\n    private callMapFunction(fct): void {\r\n        if (this.map) {\r\n            fct();\r\n        } else {\r\n            this.emitter.on('map-created', () => fct());\r\n        }\r\n    }\r\n\r\n}\r\n"],"names":["createNanoEvents","event","args","callbacks","i","length","cb","_a","GpxUtils","url","spatialReference","resolve","esriRequest","r","xml","projection","result","waypoint","wPt","Point","gr","track","polyline","Polyline","segment","path","point","pt","route","geom","node","defaultName","n","name","d","description","popupTemplate","Graphic","SwissTileLayer","BaseTileLayer","params","SpatialReference","tileInfo","TileInfo","level","row","col","__decorateClass","property","subclass","LayerUtils","config","token","esriId","layers","featureLayers","l","featureLayer","FeatureLayer","e","fLayer","mapImageLayers","layer","MapImageLayer","sublayer","layerQuery","ids","layerInfo","query","r2","f","basemapItems","item","Basemap","WMTSLayer","TileLayer","ImageryLayer","VectorTileLayer","TextUtils","graphics","index","parts","coords","geometry","symbolSize","symbol","PictureMarkerSymbol","Overview","Widget","reactiveUtils","tsx","map","Map","MapView","stopEvtPropagation","prohibitedKeys","keyPressed","WidgetUtils","basemap","view","scales","factor","display","overview","overviewExpand","Expand","layerList","LayerList","layerListExpand","items","basemapGallery","BasemapGallery","LocalBasemapsSource","a","b","basemapGalleryExpand","CoordinateConversion","handle","div","mn95","Format","conversion","Conversion","coordsExpand","MapClass","emitter","basemaps","center","extent","Extent","scaleBar","ScaleBar","overviewBasemap","position","scale","highlight","queryConfig","geometries","globalExtent","symbols","title","content","zoom","features","expandFactor","getExtent","size","GraphicsLayer","ConfigUtils","reject","overviewFactor","overviewDisplay","vectorServiceUrl","error","bm","copyright","MapControl","apiUrl","esriConfig","css","callback","fct"],"mappings":"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","x_google_ignoreList":[0]}