(function(c,g){typeof exports=="object"&&typeof module!="undefined"?module.exports=g(require("esri/config"),require("esri/geometry/Extent"),require("esri/geometry/Point"),require("esri/geometry/SpatialReference"),require("esri/Graphic"),require("esri/layers/GraphicsLayer"),require("esri/layers/support/TileInfo"),require("esri/Map"),require("esri/views/MapView"),require("esri/widgets/ScaleBar"),require("esri/geometry/Polyline"),require("esri/geometry/projection"),require("esri/request"),require("esri/Basemap"),require("esri/identity/IdentityManager"),require("esri/layers/FeatureLayer"),require("esri/layers/ImageryLayer"),require("esri/layers/TileLayer"),require("esri/layers/VectorTileLayer"),require("esri/layers/WMTSLayer"),require("esri/core/accessorSupport/decorators/property"),require("esri/core/accessorSupport/decorators/subclass"),require("esri/layers/BaseTileLayer"),require("esri/rest/query"),require("esri/symbols/PictureMarkerSymbol"),require("esri/widgets/BasemapGallery"),require("esri/widgets/BasemapGallery/support/LocalBasemapsSource"),require("esri/widgets/CoordinateConversion"),require("esri/widgets/CoordinateConversion/support/Conversion"),require("esri/widgets/CoordinateConversion/support/Format"),require("esri/widgets/Expand"),require("esri/widgets/LayerList"),require("esri/core/accessorSupport/decorators"),require("esri/core/watchUtils"),require("esri/widgets/support/widget"),require("esri/widgets/Widget")):typeof define=="function"&&define.amd?define(["esri/config","esri/geometry/Extent","esri/geometry/Point","esri/geometry/SpatialReference","esri/Graphic","esri/layers/GraphicsLayer","esri/layers/support/TileInfo","esri/Map","esri/views/MapView","esri/widgets/ScaleBar","esri/geometry/Polyline","esri/geometry/projection","esri/request","esri/Basemap","esri/identity/IdentityManager","esri/layers/FeatureLayer","esri/layers/ImageryLayer","esri/layers/TileLayer","esri/layers/VectorTileLayer","esri/layers/WMTSLayer","esri/core/accessorSupport/decorators/property","esri/core/accessorSupport/decorators/subclass","esri/layers/BaseTileLayer","esri/rest/query","esri/symbols/PictureMarkerSymbol","esri/widgets/BasemapGallery","esri/widgets/BasemapGallery/support/LocalBasemapsSource","esri/widgets/CoordinateConversion","esri/widgets/CoordinateConversion/support/Conversion","esri/widgets/CoordinateConversion/support/Format","esri/widgets/Expand","esri/widgets/LayerList","esri/core/accessorSupport/decorators","esri/core/watchUtils","esri/widgets/support/widget","esri/widgets/Widget"],g):(c=typeof globalThis!="undefined"?globalThis:c||self,c.mapcontrol=g(c["esri/config"],c.esriExtent,c.esriPoint,c.esriSpatialReference,c.esriGraphic,c.esriGraphicsLayer,c.esriTileInfo,c.esriMap,c.esriMapView,c.esriScaleBar,c.esriPolyline,c.esriprojection,c.esriRequest,c.esriBasemap,c.esriId,c.esriFeatureLayer,c.esriImageryLayer,c.esriTileLayer,c.esriVectorTileLayer,c.esriWMTSLayer,c.property,c.subclass,c.BaseTileLayer,c.esriquery,c.esriPictureMarkerSymbol,c.esriBasemapGallery,c.esriLocalBasemapsSource,c.esriCoordinateConversion,c.esriConversion,c.esriFormat,c.esriExpand,c.esriLayerList,c.esridecorators,c.esriwatchUtils,c.esriwidget,c.esriWidget))})(this,function(c,g,R,$,k,F,V,j,D,A,N,W,z,K,Q,J,H,X,Y,Z,ee,te,re,ie,se,ae,oe,ne,ce,le,pe,ue,P,de,he,ye){"use strict";function u(o){return o&&typeof o=="object"&&"default"in o?o:{default:o}}function q(o){if(o&&o.__esModule)return o;var e={__proto__:null,[Symbol.toStringTag]:"Module"};return o&&Object.keys(o).forEach(function(t){if(t!=="default"){var r=Object.getOwnPropertyDescriptor(o,t);Object.defineProperty(e,t,r.get?r:{enumerable:!0,get:function(){return o[t]}})}}),e.default=o,Object.freeze(e)}var fe=u(c),C=u(g),h=u(R),T=u($),m=u(k),ge=u(F),L=u(V),E=u(j),B=u(D),me=u(A),M=u(N),G=q(W),v=u(z),ve=u(K),we=u(Q),xe=u(J),Se=u(H),_e=u(X),be=u(Y),Le=u(Z),Pe=u(re),qe=q(ie),Ce=u(se),Te=u(ae),Ee=u(oe),Be=u(ne),Me=u(ce),Ge=u(le),w=u(pe),Ue=u(ue),Ie=u(ye);let Oe=()=>({events:{},emit(o,...e){(this.events[o]||[]).forEach(t=>t(...e))},on(o,e){return(this.events[o]=this.events[o]||[]).push(e),()=>this.events[o]=(this.events[o]||[]).filter(t=>t!==e)}});class Re{static gpxToFeatures(e,t){return new Promise(r=>{v.default(e,{responseType:"xml"}).then(i=>{const s=i.data;G.load().then(()=>{const a={waypoints:[],tracks:[]};s.querySelectorAll("wpt").forEach((n,l)=>{const p=new h.default({latitude:n.attributes.lat.value,longitude:n.attributes.lon.value}),d=this.getGraphic(p,n,`waypoint ${l+1}`,t);a.waypoints.push(d)}),s.querySelectorAll("trk").forEach((n,l)=>{const p=new M.default({paths:[],spatialReference:{wkid:4326}});n.querySelectorAll("trkseg").forEach(y=>{const f=[];y.querySelectorAll("trkpt").forEach(O=>{const ze=new h.default({latitude:O.attributes.lat.value,longitude:O.attributes.lon.value});f.push(ze)}),p.addPath(f)});const d=this.getGraphic(p,n,`track ${l+1}`,t);a.tracks.push(d)}),s.querySelectorAll("rte").forEach((n,l)=>{const p=new M.default({paths:[],spatialReference:{wkid:4326}}),d=[];n.querySelectorAll("rtept").forEach(f=>{const b=new h.default({latitude:f.attributes.lat.value,longitude:f.attributes.lon.value});d.push(b)}),p.addPath(d);const y=this.getGraphic(p,n,`route ${l+1}`,t);a.tracks.push(y)}),r(a)})})})}static getGraphic(e,t,r,i){const s=t.querySelector("name");let a=r;s&&(a=s.textContent);const n=t.querySelector("desc");let l="";n&&(l=n.textContent);const p={title:a,content:l};return new m.default({geometry:G.project(e,i),popupTemplate:p})}}var $e=Object.defineProperty,ke=Object.getOwnPropertyDescriptor,U=(o,e,t,r)=>{for(var i=r>1?void 0:r?ke(e,t):e,s=o.length-1,a;s>=0;s--)(a=o[s])&&(i=(r?a(e,t,i):a(i))||i);return r&&i&&$e(e,t,i),i};let x=class extends Pe.default{constructor(o){super();const e=new T.default({wkid:2056}),t=L.default.create({spatialReference:e,numLODs:o.scales.length,scales:o.scales});t.origin=new h.default({x:242e4,y:135e4,spatialReference:e}),this.title=o.title,this.urlTemplate=o.urlTemplate,this.spatialReference=e,this.tileInfo=t}getTileUrl(o,e,t){return this.urlTemplate.replace("{level}",o.toString()).replace("{col}",t.toString()).replace("{row}",e.toString())}};U([ee.property()],x.prototype,"urlTemplate",2),x=U([te.subclass("esri.layers.SwissTileLayer")],x);class Fe{constructor(e){this.serviceDescription=null,this.config=e,this.serviceUrl=e.vectorServiceUrl;const t=e.vectorServiceToken;we.default.registerToken({token:t,server:`${this.serviceUrl.split("/rest/services")[0]}/rest/services`})}getFeatureLayers(e){return new Promise(t=>{this.getServiceDescription().then(r=>{const i=[];r.layers.forEach(s=>{if(e.includes(s.name)){const a=new xe.default({url:`${this.serviceUrl}/${s.id}`,title:s.name});a.on("layerview-create",n=>{const l=n.layerView.layer;l.popupTemplate=l.createPopupTemplate()}),i.push(a)}}),t(i)})})}queryLayer(e,t){return new Promise(r=>{this.getServiceDescription().then(i=>{const s=i.layers.filter(a=>a.name===e.layer)[0];if(!s){console.warn(`Invalid layer name in config file: ${e.layer}`),r([]);return}qe.executeQueryJSON(`${this.serviceUrl}/${s.id}`,{where:`${e.field} in ('${t.join("','")}')`,returnGeometry:!0}).then(a=>{r(a.features.map(n=>n.geometry))})})})}getBasemaps(e){const t=[];return e.forEach(r=>{const i=this.getLayer(r);i&&t.push(new ve.default({baseLayers:[i],title:r.alias,thumbnailUrl:r.thumbnailUrl}))}),t}getServiceDescription(){return new Promise(e=>{this.serviceDescription===null?v.default(this.serviceUrl,{query:{f:"json"},responseType:"json"}).then(t=>{this.serviceDescription=t.data,e(this.serviceDescription)}):e(this.serviceDescription)})}getLayer(e){switch(e.type){case"tile":return new x({title:e.alias,urlTemplate:e.urlTemplate,scales:this.config.scales});case"wmts":return new Le.default({url:e.url,activeLayer:{id:e.layerId},copyright:e.copyright});case"mapservice":return new _e.default({url:e.url,copyright:e.copyright});case"imageservice":return new Se.default({url:e.url,copyright:e.copyright});case"vectortile":return new be.default({url:e.url});default:return console.warn(`Unsupported basemap type: ${e.type}`),null}}}class Ve{static txtToFeatures(e,t){return new Promise(r=>{v.default(e,{responseType:"text"}).then(i=>{const s=[];i.data.split(`
`).forEach((a,n)=>{if(n){const l=a.split("	");if(l.length>=5){const p=l[0].split(","),d=new h.default({x:parseFloat(p[1]),y:parseFloat(p[0]),spatialReference:t}),y={title:l[1],content:l[2]},f=l[4].split(","),b=new Ce.default({url:l[3],width:`${f[0]}px`,height:`${f[1]}px`});s.push(new m.default({geometry:d,symbol:b,popupTemplate:y}))}}}),r(s)})})}}var je=Object.defineProperty,De=Object.getOwnPropertyDescriptor,I=(o,e,t,r)=>{for(var i=r>1?void 0:r?De(e,t):e,s=o.length-1,a;s>=0;s--)(a=o[s])&&(i=(r?a(e,t,i):a(i))||i);return r&&i&&je(e,t,i),i};let S=class extends Ie.default{constructor(o){super(o)}postInitialize(){de.init(this.mainView,"center, interacting, scale",()=>{this.onViewChange()})}render(){return setTimeout(()=>{this.expand.expanded&&this.onViewChange()},10),he.tsx("div",{id:`${this.id}_cont`,style:"width:250px;height:150px;background:#fff"})}onViewChange(){this.expand.expanded&&(!this.overview&&document.getElementById(`${this.id}_cont`)&&(this.createMap(),this.createExtentGraphic()),this.overview&&(this.overview.center=this.mainView.center,this.overview.scale=this.mainView.scale*this.factor,this.extentGraphic.geometry=this.mainView.extent))}createMap(){const o=new E.default({basemap:this.basemap}),e=L.default.create({spatialReference:this.mainView.spatialReference,numLODs:this.scales.length,scales:this.scales});this.overview=new B.default({container:`${this.id}_cont`,map:o,scale:this.mainView.scale,center:this.mainView.center,spatialReference:this.mainView.spatialReference,constraints:{rotationEnabled:!1,lods:e.lods},ui:{components:[]}}),this.overview.when(()=>{const t=r=>{r.stopPropagation()};this.overview.on("mouse-wheel",t),this.overview.on("double-click",t),this.overview.on("double-click",["Control"],t),this.overview.on("drag",t),this.overview.on("drag",["Shift"],t),this.overview.on("drag",["Shift","Control"],t),this.overview.on("key-down",r=>{const i=["+","-","Shift","_","=","ArrowUp","ArrowDown","ArrowRight","ArrowLeft"],s=r.key;i.indexOf(s)!==-1&&r.stopPropagation()})})}createExtentGraphic(){const o={type:"simple-fill",color:[0,0,0,.5],outline:null};this.extentGraphic=new m.default({symbol:o}),this.overview.graphics.add(this.extentGraphic)}};I([P.property()],S.prototype,"expand",2),S=I([P.subclass("esri.widgets.Overview")],S);class _{static addOverview(e,t,r,i,s){const a=new S({basemap:e,mainView:t,scales:r,factor:i}),n=new w.default({expandIconClass:"esri-icon-maps",view:t,content:a,expanded:s==="expanded",mode:"floating",autoCollapse:!1,group:"api"});a.expand=n,t.ui.add(n,{position:"bottom-right"})}static addLayerList(e,t){const r=new Ue.default({view:e}),i=new w.default({expandIconClass:"esri-icon-layers",view:e,content:r,expanded:t==="expanded",mode:"floating",autoCollapse:!1,group:"api"});e.ui.add(i,{position:"top-right"})}static addBasemapGallery(e,t){const r=new Te.default({source:new Ee.default({basemaps:e}),view:t});r.viewModel.basemapEquals=(s,a)=>s.id===a.id;const i=new w.default({expandIconClass:"esri-icon-basemap",view:t,content:r,mode:"floating",autoCollapse:!0,group:"api"});t.ui.add(i,{position:"top-right"})}static addCoordinates(e,t){const r=new Be.default({view:e});r.visibleElements={expandButton:!1},r.when(()=>{const s=document.getElementsByClassName("esri-coordinate-conversion")[0];s.style.width="300px";const a=r.formats.find(p=>p.name==="basemap"),n=new Ge.default({name:"mn95",coordinateSegments:a.coordinateSegments,spatialReference:a.spatialReference});r.formats=r.formats.filter(p=>p.name==="dd"),r.formats.add(n,0),r.conversions.removeAll();const l=new Me.default({format:n});r.conversions.add(l)});const i=new w.default({expandIconClass:"esri-icon-locate",view:e,content:r,expanded:t==="expanded",mode:"floating",autoCollapse:!1,group:"api"});e.ui.add(i,{position:"bottom-right"})}}class Ae{constructor(e){this.config=e,this.layerUtils=new Fe(e)}init(e){const t=this.layerUtils.getBasemaps(this.config.basemaps),r=new E.default({basemap:t[0]}),i=new T.default({wkid:this.config.spatialReference}),s=new h.default({x:this.config.center[0],y:this.config.center[1],spatialReference:i}),a=L.default.create({spatialReference:i,numLODs:this.config.scales.length,scales:this.config.scales}),n=new C.default({xmin:this.config.globalExtent.xmin,ymin:this.config.globalExtent.ymin,xmax:this.config.globalExtent.xmax,ymax:this.config.globalExtent.ymax,spatialReference:i});this.view=new B.default({container:this.config.container,map:r,scale:this.config.scale,center:s,spatialReference:i,constraints:{rotationEnabled:!1,lods:a.lods,minScale:this.config.minScale,maxScale:this.config.maxScale,geometry:n},popup:{dockEnabled:!0,dockOptions:{buttonEnabled:!1,breakpoint:!1},viewModel:{includeDefaultActions:!1}}}),this.view.when(()=>{e.emit("map-created")});const l=new me.default({view:this.view,unit:"metric"});if(this.view.ui.add(l,{position:"bottom-left"}),this.config.layers&&this.layerUtils.getFeatureLayers(this.config.layers).then(p=>{this.view.map.addMany(p)}),t.length>1&&_.addBasemapGallery(t,this.view),this.config.layerList&&_.addLayerList(this.view,this.config.layerList),this.config.overviewDisplay&&this.config.overviewBasemap){const p=this.layerUtils.getBasemaps([this.config.overviewBasemap])[0];_.addOverview(p,this.view,this.config.scales,this.config.overviewFactor,this.config.overviewDisplay)}this.config.showCoords&&_.addCoordinates(this.view,this.config.showCoords),this.view.on("click",p=>{p.native.ctrlKey&&(p.stopPropagation(),e.emit("ctrlClick",[p.mapPoint.x,p.mapPoint.y]))})}center(e,t){this.view.center=new h.default({x:e[0],y:e[1],spatialReference:this.view.spatialReference}),t!==void 0&&(this.view.scale=t)}centerOnObject(e,t,r){this.view.graphics.removeAll();const i=this.config.vectorLayerQueries.filter(s=>s.layer===e)[0];if(!i){console.warn(`Invalid layer name: ${e}`);return}this.layerUtils.queryLayer(i,t).then(s=>{if(!s.length){console.warn("No object found with this query.");return}const a=this.getGlobalExtent(s,1.5);if(this.view.extent=a,r){const n={point:this.config.selectionPointSymbol,multipoint:this.config.selectionPointSymbol,polyline:this.config.selectionPolylineSymbol,polygon:this.config.selectionPolygonSymbol};s.forEach(l=>{const p=new m.default({geometry:l,symbol:n[l.type]});this.view.graphics.add(p)})}})}getCenterCoordinates(){return[this.view.center.x,this.view.center.y]}showPopup(e,t){this.view.popup.open({title:e,content:t}),this.view.popup.collapsed=!1}addMarker(e){const t=this.config.markerSymbol;e!==void 0&&e.icon&&e.size&&(t.url=e.icon,t.width=`${e.size[0]}px`,t.height=`${e.size[1]}px`);const r=e!==void 0&&e.position?e.position:this.getCenterCoordinates(),i=new h.default({x:r[0],y:r[1],spatialReference:this.view.spatialReference}),s=new m.default({geometry:i,symbol:t});this.view.graphics.add(s)}addGpxLayer(e,t,r){!this.isValidLayerName(e)||Re.gpxToFeatures(t,this.view.spatialReference).then(i=>{const s={point:this.config.gpxPointSymbol,polyline:this.config.gpxPolylineSymbol,polygon:this.config.gpxPolygonSymbol},a=[];i.tracks.forEach(n=>{n.symbol=s[n.geometry.type],a.push(n)}),i.waypoints.forEach(n=>{n.symbol=s[n.geometry.type],a.push(n)}),this.addGraphicsLayer(a,e,r)})}addTextLayer(e,t,r){!this.isValidLayerName(e)||Ve.txtToFeatures(t,this.view.spatialReference).then(i=>{this.addGraphicsLayer(i,e,r)})}getGlobalExtent(e,t){const r=s=>{const a=s.extent;if(a&&a.width&&a.height)return a.expand(t);const n=s.type==="point"?[s.x,s.y]:s.points[0],l=50;return new C.default({xmin:n[0]-l,ymin:n[1]-l,xmax:n[0]+l,ymax:n[1]+l,spatialReference:this.view.spatialReference})};let i;return e.forEach(s=>{i?i.union(r(s)):i=r(s.clone())}),i.expand(t)}isValidLayerName(e){return this.view.map.layers.some(t=>t.title===e)?(console.warn(`Map already contains a layer called '${e}'.`),!1):!0}addGraphicsLayer(e,t,r){const i=new ge.default({title:t});if(this.view.map.add(i),i.graphics.addMany(e),r){const s=e.map(n=>n.geometry),a=this.getGlobalExtent(s,1.5);this.view.extent=a}}}class Ne{static getConfig(e){return new Promise((t,r)=>{v.default(e.configUrl,{responseType:"json"}).then(i=>{const s=i.data;let a,n,l;if(e.miniMap!==void 0){l=e.miniMap;const y=this.getBasemap(s.basemaps,s.overviewBasemap);y&&(a=y),n=s.overviewFactor}let p;e.layerList!==void 0&&e.layers&&e.layers.length&&(p=e.layerList);let d=s.vectorServiceUrl;d.substring(d.length-1)==="/"&&(d=d.substring(0,d.length-1)),t({apiUrl:s.apiUrl,basemaps:this.getBasemaps(s,e),center:e.center||s.center,container:e.container,globalExtent:s.globalExtent,gpxPointSymbol:s.gpxPointSymbol,gpxPolylineSymbol:s.gpxPolylineSymbol,gpxPolygonSymbol:s.gpxPolygonSymbol,layers:e.layers,layerList:p,markerSymbol:s.markerSymbol,maxScale:s.maxScale,minScale:s.minScale,overviewBasemap:a,overviewDisplay:l,overviewFactor:n,scale:e.scale||s.scale,scales:s.scales,selectionPointSymbol:s.selectionPointSymbol,selectionPolylineSymbol:s.selectionPolylineSymbol,selectionPolygonSymbol:s.selectionPolygonSymbol,spatialReference:s.spatialReference,showCoords:e.showCoords,vectorLayerQueries:s.vectorLayerQueries,vectorServiceUrl:d,vectorServiceToken:s.vectorServiceToken})}).catch(i=>{r(i)})})}static getBasemaps(e,t){const r=[];if(t.basemaps===void 0){const i=this.getBasemap(e.basemaps,e.defaultBasemap,e.copyright);i&&r.push(i)}else t.basemaps.forEach(i=>{const s=this.getBasemap(e.basemaps,i,e.copyright);s&&r.push(s)});return r}static getBasemap(e,t,r){const i=e[t];return i?{alias:i.alias,copyright:r,layerId:i.layerId,name:t,thumbnailUrl:i.thumbnailUrl,type:i.type,url:i.url,urlTemplate:i.urlTemplate}:(console.warn(`Invalid basemap name: ${t}`),null)}}class We{constructor(e){this.emitter=Oe(),Ne.getConfig(e).then(t=>{let r=t.apiUrl;r.charAt(r.length-1)!=="/"&&(r+="/"),fe.default.assetsPath=`${r}@arcgis/core/assets`;const i=document.createElement("link");i.setAttribute("rel","stylesheet"),i.setAttribute("type","text/css"),i.setAttribute("href",`${r}@arcgis/core/assets/esri/themes/light/main.css`),document.getElementsByTagName("head")[0].appendChild(i),this.map=new Ae(t),this.map.init(this.emitter)}).catch(t=>{console.error(t)})}on(e,t){return this.emitter.on(e,t)}center(e,t){this.callMapFunction(()=>this.map.center(e,t))}centerOnObject(e,t,r){this.callMapFunction(()=>this.map.centerOnObject(e,t,r))}addGpxLayer(e,t,r){this.callMapFunction(()=>this.map.addGpxLayer(e,t,r))}addTextLayer(e,t,r){this.callMapFunction(()=>this.map.addTextLayer(e,t,r))}addMarker(e){this.callMapFunction(()=>this.map.addMarker(e))}showPopup(e,t){this.map.showPopup(e,t)}callMapFunction(e){this.map?e():this.emitter.on("map-created",()=>e())}}return We});
//# sourceMappingURL=main.js.map
