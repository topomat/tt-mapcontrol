{"version":3,"file":"main.js","sources":["../../node_modules/nanoevents/index.js","../../src/utils/GpxUtils.ts","../../src/utils/SwissTileLayer.ts","../../src/utils/LayerUtils.ts","../../src/utils/TextUtils.ts","../../src/widgets/Overview.tsx","../../src/utils/WidgetUtils.ts","../../src/MapClass.ts","../../src/utils/ConfigUtils.ts","../../src/MapControl.ts"],"sourcesContent":["export let createNanoEvents = () => ({\n  events: {},\n  emit(event, ...args) {\n    ;(this.events[event] || []).forEach(i => i(...args))\n  },\n  on(event, cb) {\n    ;(this.events[event] = this.events[event] || []).push(cb)\n    return () =>\n      (this.events[event] = (this.events[event] || []).filter(i => i !== cb))\n  }\n})\n","import Geometry from '@arcgis/core/geometry/Geometry';\r\nimport Point from '@arcgis/core/geometry/Point';\r\nimport Polyline from '@arcgis/core/geometry/Polyline';\r\nimport * as projection from '@arcgis/core/geometry/projection';\r\nimport SpatialReference from '@arcgis/core/geometry/SpatialReference';\r\nimport Graphic from '@arcgis/core/Graphic';\r\nimport esriRequest from '@arcgis/core/request';\r\n\r\ntype GpxContent = {\r\n    waypoints: Graphic[];\r\n    tracks: Graphic[];\r\n}\r\n\r\nexport default class GpxUtils {\r\n\r\n    static gpxToFeatures(url: string, spatialReference: SpatialReference): Promise<GpxContent> {\r\n        return new Promise((resolve) => {\r\n            esriRequest(url, {\r\n                responseType: 'xml',\r\n            }).then((r) => {\r\n                const xml = r.data;\r\n                projection.load().then(() => {\r\n                    const result: GpxContent = {\r\n                        waypoints: [],\r\n                        tracks: [],\r\n                    };\r\n                    xml.querySelectorAll('wpt').forEach((waypoint, i) => {\r\n                        const wPt = new Point({ latitude: waypoint.attributes.lat.value, longitude: waypoint.attributes.lon.value });\r\n                        const gr = this.getGraphic(wPt, waypoint, `waypoint ${i + 1}`, spatialReference);\r\n                        result.waypoints.push(gr);\r\n                    });\r\n                    xml.querySelectorAll('trk').forEach((track, i) => {\r\n                        const polyline = new Polyline({ paths: [], spatialReference: { wkid: 4326 } });\r\n                        track.querySelectorAll('trkseg').forEach((segment) => {\r\n                            const path: Point[] = [];\r\n                            const points = segment.querySelectorAll('trkpt');\r\n                            points.forEach((point) => {\r\n                                const pt = new Point({ latitude: point.attributes.lat.value, longitude: point.attributes.lon.value });\r\n                                path.push(pt);\r\n                            });\r\n                            polyline.addPath(path);\r\n                        });\r\n                        const gr = this.getGraphic(polyline, track, `track ${i + 1}`, spatialReference);\r\n                        result.tracks.push(gr);\r\n                    });\r\n                    xml.querySelectorAll('rte').forEach((route, i) => {\r\n                        const polyline = new Polyline({ paths: [], spatialReference: { wkid: 4326 } });\r\n                        const path: Point[] = [];\r\n                        route.querySelectorAll('rtept').forEach((point) => {\r\n                            const pt = new Point({ latitude: point.attributes.lat.value, longitude: point.attributes.lon.value });\r\n                            path.push(pt);\r\n                        });\r\n                        polyline.addPath(path);\r\n                        const gr = this.getGraphic(polyline, route, `route ${i + 1}`, spatialReference);\r\n                        result.tracks.push(gr);\r\n                    });\r\n                    resolve(result);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    private static getGraphic(geom: Geometry, node: any, defaultName: string, spatialReference: SpatialReference): Graphic {\r\n        const n = node.querySelector('name');\r\n        let name = defaultName;\r\n        if (n) {\r\n            name = n.textContent;\r\n        }\r\n        const d = node.querySelector('desc');\r\n        let description = '';\r\n        if (d) {\r\n            description = d.textContent;\r\n        }\r\n        const popupTemplate = {\r\n            title: name,\r\n            content: description,\r\n        };\r\n        return new Graphic({\r\n            geometry: projection.project(geom, spatialReference) as Geometry,\r\n            popupTemplate,\r\n        });\r\n    }\r\n}\r\n","import { property } from '@arcgis/core/core/accessorSupport/decorators/property';\r\nimport { subclass } from '@arcgis/core/core/accessorSupport/decorators/subclass';\r\nimport Point from '@arcgis/core/geometry/Point';\r\nimport SpatialReference from '@arcgis/core/geometry/SpatialReference';\r\nimport BaseTileLayer from '@arcgis/core/layers/BaseTileLayer';\r\nimport TileInfo from '@arcgis/core/layers/support/TileInfo';\r\n\r\n@subclass('esri.layers.SwissTileLayer')\r\nexport default class SwissTileLayer extends BaseTileLayer {\r\n\r\n    @property()\r\n    // eslint-disable-next-line indent\r\n    urlTemplate: string;\r\n\r\n    constructor(params) {\r\n        super();\r\n        const spatialReference = new SpatialReference({\r\n            wkid: 2056,\r\n        });\r\n        const tileInfo = TileInfo.create({\r\n            spatialReference,\r\n            numLODs: params.scales.length,\r\n            scales: params.scales,\r\n        });\r\n        tileInfo.origin = new Point({\r\n            x: 2420000,\r\n            y: 1350000,\r\n            spatialReference,\r\n        });\r\n        this.title = params.title;\r\n        this.urlTemplate = params.urlTemplate;\r\n        this.spatialReference = spatialReference;\r\n        this.tileInfo = tileInfo;\r\n    }\r\n\r\n    getTileUrl(level: number, row: number, col: number): string {\r\n        return this.urlTemplate\r\n            .replace('{level}', level.toString())\r\n            .replace('{col}', col.toString())\r\n            .replace('{row}', row.toString());\r\n    }\r\n\r\n}\r\n","import Basemap from '@arcgis/core/Basemap';\r\nimport Geometry from '@arcgis/core/geometry/Geometry';\r\nimport esriId from '@arcgis/core/identity/IdentityManager';\r\nimport FeatureLayer from '@arcgis/core/layers/FeatureLayer';\r\nimport ImageryLayer from '@arcgis/core/layers/ImageryLayer';\r\nimport Layer from '@arcgis/core/layers/Layer';\r\nimport TileLayer from '@arcgis/core/layers/TileLayer';\r\nimport VectorTileLayer from '@arcgis/core/layers/VectorTileLayer';\r\nimport WMTSLayer from '@arcgis/core/layers/WMTSLayer';\r\nimport SwissTileLayer from './SwissTileLayer';\r\nimport esriRequest from '@arcgis/core/request';\r\nimport * as query from '@arcgis/core/rest/query';\r\nimport { BasemapItem, ConfigItem, LayerQueryItem } from '../types/ConfigItem';\r\n\r\nexport default class LayerUtils {\r\n    private serviceDescription = null;\r\n    private config: ConfigItem;\r\n    private serviceUrl: string;\r\n\r\n    constructor(config: ConfigItem) {\r\n        this.config = config;\r\n        this.serviceUrl = config.vectorServiceUrl;\r\n        const token = config.vectorServiceToken;\r\n        esriId.registerToken({\r\n            token,\r\n            server: `${this.serviceUrl.split('/rest/services')[0]}/rest/services`,\r\n        });\r\n    }\r\n\r\n    getFeatureLayers(layers: string[]): Promise<FeatureLayer[]> {\r\n        return new Promise((resolve) => {\r\n            this.getServiceDescription().then((r) => {\r\n                const featureLayers: FeatureLayer[] = [];\r\n                r.layers.forEach((l) => {\r\n                    if (layers.includes(l.name)) {\r\n                        const featureLayer = new FeatureLayer({\r\n                            url: `${this.serviceUrl}/${l.id}`,\r\n                            title: l.name,\r\n                        });\r\n                        featureLayer.on('layerview-create', (e) => {\r\n                            const fLayer = e.layerView.layer as FeatureLayer;\r\n                            fLayer.popupTemplate = fLayer.createPopupTemplate();\r\n                            // requête si le champ pricipal est une expression Arcade\r\n                            /*esriRequest(url, {\r\n                                query: {\r\n                                    f: 'json',\r\n                                },\r\n                                responseType: 'json',\r\n                            }).then((r2) => {\r\n                                // r2.displayFieldExpressionInfo contient \"$feature.VOIE_TXT + \\\" \\\" + $feature.NO_ENTREE + \\\", \\\" + $feature.CODEPOST_4 + \\\" \\\" + $feature.LOCALITE;\"\r\n                                // il faudrait convertir cela dans la chaîne ci-dessous\r\n                                //fLayer.popupTemplate.title = '{VOIE_TXT} {NO_ENTREE}, {CODEPOST_4} {LOCALITE};';\r\n                            });*/\r\n                        });\r\n                        featureLayers.push(featureLayer);\r\n                    }\r\n                });\r\n                resolve(featureLayers);\r\n            });\r\n        });\r\n    }\r\n\r\n    queryLayer(layerQuery: LayerQueryItem, ids: string[]): Promise<Geometry[]> {\r\n        return new Promise((resolve) => {\r\n            this.getServiceDescription().then((r) => {\r\n                const layerInfo = r.layers.filter((l) => l.name === layerQuery.layer)[0];\r\n                if (!layerInfo) {\r\n                    console.warn(`Invalid layer name in config file: ${layerQuery.layer}`);\r\n                    resolve([]);\r\n                    return;\r\n                }\r\n                query.executeQueryJSON(`${this.serviceUrl}/${layerInfo.id}`, {\r\n                    where: `${layerQuery.field} in ('${ids.join('\\',\\'')}')`,\r\n                    returnGeometry: true,\r\n                }).then((r2) => {\r\n                    resolve(r2.features.map((f) => f.geometry));\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    getBasemaps(basemapItems: BasemapItem[]): Basemap[] {\r\n        const result: Basemap[] = [];\r\n        basemapItems.forEach((item) => {\r\n            const layer = this.getLayer(item);\r\n            if (layer) {\r\n                result.push(new Basemap({\r\n                    baseLayers: [layer],\r\n                    title: item.alias,\r\n                    thumbnailUrl: item.thumbnailUrl,\r\n                }));\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    private getServiceDescription(): Promise<any> {\r\n        return new Promise((resolve) => {\r\n            if (this.serviceDescription === null) {\r\n                esriRequest(this.serviceUrl, {\r\n                    query: {\r\n                        f: 'json',\r\n                    },\r\n                    responseType: 'json',\r\n                }).then((r) => {\r\n                    this.serviceDescription = r.data;\r\n                    resolve(this.serviceDescription);\r\n                });\r\n            } else {\r\n                resolve(this.serviceDescription);\r\n            }\r\n        });\r\n    }\r\n\r\n    private getLayer(params: BasemapItem): Layer | null {\r\n        switch (params.type) {\r\n            case 'tile':\r\n                return new SwissTileLayer({\r\n                    title: params.alias,\r\n                    urlTemplate: params.urlTemplate,\r\n                    scales: this.config.scales,\r\n                });\r\n            case 'wmts':\r\n                return new WMTSLayer({\r\n                    url: params.url,\r\n                    activeLayer: {\r\n                        id: params.layerId,\r\n                    },\r\n                    copyright: params.copyright,\r\n                });\r\n            case 'mapservice':\r\n                return new TileLayer({\r\n                    url: params.url,\r\n                    copyright: params.copyright,\r\n                });\r\n            case 'imageservice':\r\n                return new ImageryLayer({\r\n                    url: params.url,\r\n                    copyright: params.copyright,\r\n                });\r\n            case 'vectortile':\r\n                return new VectorTileLayer({\r\n                    url: params.url,\r\n                });\r\n            default:\r\n                console.warn(`Unsupported basemap type: ${params.type}`);\r\n                return null;\r\n        }\r\n    }\r\n\r\n}\r\n","import Point from '@arcgis/core/geometry/Point';\r\nimport SpatialReference from '@arcgis/core/geometry/SpatialReference';\r\nimport Graphic from '@arcgis/core/Graphic';\r\nimport esriRequest from '@arcgis/core/request';\r\nimport PictureMarkerSymbol from '@arcgis/core/symbols/PictureMarkerSymbol';\r\n\r\nexport default class TextUtils {\r\n\r\n    static txtToFeatures(url: string, spatialReference: SpatialReference): Promise<Graphic[]> {\r\n        return new Promise((resolve) => {\r\n            esriRequest(url, {\r\n                responseType: 'text',\r\n            }).then((r) => {\r\n                const graphics: Graphic[] = [];\r\n                r.data.split('\\n').forEach((row: string, index: number) => {\r\n                    if (index) { // la première ligne contient le nom des champs\r\n                        const parts = row.split('\\t');\r\n                        if (parts.length >= 5) {\r\n                            const coords = parts[0].split(',');\r\n                            const geometry = new Point({ x: parseFloat(coords[1]), y: parseFloat(coords[0]), spatialReference });\r\n                            const popupTemplate = {\r\n                                title: parts[1],\r\n                                content: parts[2],\r\n                            };\r\n                            const symbolSize = parts[4].split(',');\r\n                            const symbol = new PictureMarkerSymbol({\r\n                                url: parts[3],\r\n                                width: `${symbolSize[0]}px`,\r\n                                height: `${symbolSize[1]}px`,\r\n                            });\r\n                            graphics.push(new Graphic({\r\n                                geometry,\r\n                                symbol,\r\n                                popupTemplate,\r\n                            }));\r\n                        }\r\n                    }\r\n                });\r\n                resolve(graphics);\r\n            });\r\n        });\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport Basemap from '@arcgis/core/Basemap';\r\nimport { property, subclass } from '@arcgis/core/core/accessorSupport/decorators';\r\nimport { init } from '@arcgis/core/core/watchUtils';\r\nimport Graphic from '@arcgis/core/Graphic';\r\nimport TileInfo from '@arcgis/core/layers/support/TileInfo';\r\nimport Map from '@arcgis/core/Map';\r\nimport MapView from '@arcgis/core/views/MapView';\r\nimport Expand from '@arcgis/core/widgets/Expand';\r\nimport { tsx } from '@arcgis/core/widgets/support/widget';\r\nimport Widget from '@arcgis/core/widgets/Widget';\r\n\r\ninterface OverviewParams extends __esri.WidgetProperties {\r\n    basemap: Basemap;\r\n    mainView: MapView;\r\n    scales: number[];\r\n    factor: number;\r\n}\r\n\r\n@subclass('esri.widgets.Overview')\r\nexport default class Overview extends Widget {\r\n    private overview: MapView;\r\n    private extentGraphic: Graphic;\r\n    private mainView: MapView;\r\n    private basemap: Basemap;\r\n    private scales: number[];\r\n    private factor: number;\r\n\r\n    constructor(params?: OverviewParams) {\r\n        super(params);\r\n    }\r\n\r\n    postInitialize() {\r\n        init(this.mainView, 'center, interacting, scale', () => {\r\n            this.onViewChange();\r\n        });\r\n    }\r\n\r\n    @property()\r\n        expand: Expand;\r\n\r\n    render() {\r\n        setTimeout(() => {\r\n            if (this.expand.expanded) {\r\n                this.onViewChange();\r\n            }\r\n        }, 10);\r\n        return <div id={`${this.id}_cont`} style=\"width:250px;height:150px;background:#fff\"></div>;\r\n    }\r\n\r\n    private onViewChange(): void {\r\n        if (this.expand.expanded) {\r\n            if (!this.overview && document.getElementById(`${this.id}_cont`)) {\r\n                this.createMap();\r\n                this.createExtentGraphic();\r\n            }\r\n            if (this.overview) {\r\n                this.overview.center = this.mainView.center;\r\n                this.overview.scale = this.mainView.scale * this.factor;\r\n                this.extentGraphic.geometry = this.mainView.extent;\r\n            }\r\n        }\r\n    }\r\n\r\n    private createMap(): void {\r\n        const map = new Map({\r\n            basemap: this.basemap,\r\n        });\r\n        const tileInfo = TileInfo.create({\r\n            spatialReference: this.mainView.spatialReference,\r\n            numLODs: this.scales.length,\r\n            scales: this.scales,\r\n        });\r\n        this.overview = new MapView({\r\n            container: `${this.id}_cont`,\r\n            map,\r\n            scale: this.mainView.scale,\r\n            center: this.mainView.center,\r\n            spatialReference: this.mainView.spatialReference,\r\n            constraints: {\r\n                rotationEnabled: false,\r\n                lods: tileInfo.lods,\r\n            },\r\n            ui: {\r\n                components: [],\r\n            },\r\n        });\r\n        this.overview.when(() => {\r\n            const stopEvtPropagation = (event) => {\r\n                event.stopPropagation();\r\n            };\r\n            this.overview.on('mouse-wheel', stopEvtPropagation);\r\n            this.overview.on('double-click', stopEvtPropagation);\r\n            this.overview.on('double-click', ['Control'], stopEvtPropagation);\r\n            this.overview.on('drag', stopEvtPropagation);\r\n            this.overview.on('drag', ['Shift'], stopEvtPropagation);\r\n            this.overview.on('drag', ['Shift', 'Control'], stopEvtPropagation);\r\n            this.overview.on('key-down', (event) => {\r\n                const prohibitedKeys = [\r\n                    '+',\r\n                    '-',\r\n                    'Shift',\r\n                    '_',\r\n                    '=',\r\n                    'ArrowUp',\r\n                    'ArrowDown',\r\n                    'ArrowRight',\r\n                    'ArrowLeft',\r\n                ];\r\n                const keyPressed = event.key;\r\n                if (prohibitedKeys.indexOf(keyPressed) !== -1) {\r\n                    event.stopPropagation();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private createExtentGraphic(): void {\r\n        const symbol = {\r\n            type: 'simple-fill',\r\n            color: [0, 0, 0, 0.5],\r\n            outline: null,\r\n        };\r\n\r\n        this.extentGraphic = new Graphic({\r\n            symbol,\r\n        });\r\n        this.overview.graphics.add(this.extentGraphic);\r\n    }\r\n}\r\n","import Basemap from '@arcgis/core/Basemap';\r\nimport MapView from '@arcgis/core/views/MapView';\r\nimport BasemapGallery from '@arcgis/core/widgets/BasemapGallery';\r\nimport LocalBasemapsSource from '@arcgis/core/widgets/BasemapGallery/support/LocalBasemapsSource';\r\nimport CoordinateConversion from '@arcgis/core/widgets/CoordinateConversion';\r\nimport Conversion from '@arcgis/core/widgets/CoordinateConversion/support/Conversion';\r\nimport Format from '@arcgis/core/widgets/CoordinateConversion/support/Format';\r\nimport Expand from '@arcgis/core/widgets/Expand';\r\nimport LayerList from '@arcgis/core/widgets/LayerList';\r\nimport Overview from '../widgets/Overview';\r\n\r\nexport default class WidgetUtils {\r\n\r\n    static addOverview(basemap: Basemap, view: MapView, scales: number[], factor: number, display: 'collapsed' | 'expanded'): void {\r\n        const overview = new Overview({\r\n            basemap,\r\n            mainView: view,\r\n            scales,\r\n            factor,\r\n        });\r\n        const overviewExpand = new Expand({\r\n            expandIconClass: 'esri-icon-maps',\r\n            view,\r\n            content: overview,\r\n            expanded: display === 'expanded',\r\n            mode: 'floating',\r\n            autoCollapse: false,\r\n            group: 'api',\r\n        });\r\n        overview.expand = overviewExpand;\r\n        view.ui.add(overviewExpand, {\r\n            position: 'bottom-right',\r\n        });\r\n    }\r\n\r\n    static addLayerList(view: MapView, display: 'collapsed' | 'expanded'): void {\r\n        const layerList = new LayerList({\r\n            view,\r\n        });\r\n        const layerListExpand = new Expand({\r\n            expandIconClass: 'esri-icon-layers',\r\n            view,\r\n            content: layerList,\r\n            expanded: display === 'expanded',\r\n            mode: 'floating',\r\n            autoCollapse: false,\r\n            group: 'api',\r\n        });\r\n        view.ui.add(layerListExpand, {\r\n            position: 'top-right',\r\n        });\r\n    }\r\n\r\n    static addBasemapGallery(items: Basemap[], view: MapView): void {\r\n        const basemapGallery = new BasemapGallery({\r\n            source: new LocalBasemapsSource({\r\n                basemaps: items,\r\n            }),\r\n            view,\r\n        });\r\n\r\n        // redéfinition de la fonction qui compare les basemaps pour que la basemap courante soit sélevtionée dans la liste\r\n        // la fonction de base tient uniquement compte de l'url et comme elles sont identiques pour les différents services de l'asit\r\n        // tous les éléments de l'asit sont sélectionnés lorque la base base active vient de l'asit\r\n        basemapGallery.viewModel.basemapEquals = (a, b) => a.id === b.id;\r\n\r\n        const basemapGalleryExpand = new Expand({\r\n            expandIconClass: 'esri-icon-basemap',\r\n            view,\r\n            content: basemapGallery,\r\n            mode: 'floating',\r\n            autoCollapse: true,\r\n            group: 'api',\r\n        });\r\n        view.ui.add(basemapGalleryExpand, {\r\n            position: 'top-right',\r\n        });\r\n    }\r\n\r\n    static addCoordinates(view: MapView, display: 'collapsed' | 'expanded'): void {\r\n        const coords = new CoordinateConversion({\r\n            view,\r\n        });\r\n        coords.visibleElements = {\r\n            expandButton: false,\r\n        };\r\n\r\n        coords.when(() => {\r\n            const div = document.getElementsByClassName('esri-coordinate-conversion')[0] as HTMLElement;\r\n            div.style.width = '300px';\r\n\r\n            // copie du format basemap pour pouvoir donner un autre nom\r\n            const basemap = coords.formats.find((f) => f.name === 'basemap');\r\n            const mn95 = new Format({\r\n                name: 'mn95',\r\n                coordinateSegments: basemap.coordinateSegments,\r\n                spatialReference: basemap.spatialReference,\r\n            });\r\n\r\n            // ajout du format MN95 par défaut\r\n            coords.formats = coords.formats.filter((f) => f.name === 'dd');\r\n            coords.formats.add(mn95, 0);\r\n            coords.conversions.removeAll();\r\n            const conversion = new Conversion({\r\n                format: mn95,\r\n            });\r\n            coords.conversions.add(conversion);\r\n        });\r\n\r\n        const coordsExpand = new Expand({\r\n            expandIconClass: 'esri-icon-locate',\r\n            view,\r\n            content: coords,\r\n            expanded: display === 'expanded',\r\n            mode: 'floating',\r\n            autoCollapse: false,\r\n            group: 'api',\r\n        });\r\n        view.ui.add(coordsExpand, {\r\n            position: 'bottom-right',\r\n        });\r\n    }\r\n\r\n}\r\n","import Extent from '@arcgis/core/geometry/Extent';\r\nimport Geometry from '@arcgis/core/geometry/Geometry';\r\nimport MultiPoint from '@arcgis/core/geometry/MultiPoint';\r\nimport Point from '@arcgis/core/geometry/Point';\r\nimport SpatialReference from '@arcgis/core/geometry/SpatialReference';\r\nimport Graphic from '@arcgis/core/Graphic';\r\nimport GraphicsLayer from '@arcgis/core/layers/GraphicsLayer';\r\nimport TileInfo from '@arcgis/core/layers/support/TileInfo';\r\nimport Map from '@arcgis/core/Map';\r\nimport MapView from '@arcgis/core/views/MapView';\r\nimport ScaleBar from '@arcgis/core/widgets/ScaleBar';\r\nimport { Emitter } from 'nanoevents';\r\nimport { ConfigItem } from './types/ConfigItem';\r\nimport { MarkerParams } from './types/MarkerParams';\r\nimport GpxUtils from './utils/GpxUtils';\r\nimport LayerUtils from './utils/LayerUtils';\r\nimport TextUtils from './utils/TextUtils';\r\nimport WidgetUtils from './utils/WidgetUtils';\r\n\r\nexport default class MapClass {\r\n    private view: MapView;\r\n    private layerUtils: LayerUtils;\r\n\r\n    constructor(public config: ConfigItem) {\r\n        this.layerUtils = new LayerUtils(config);\r\n    }\r\n\r\n    init(emitter: Emitter): void {\r\n        const basemaps = this.layerUtils.getBasemaps(this.config.basemaps);\r\n        const map = new Map({\r\n            basemap: basemaps[0],\r\n        });\r\n        const spatialReference = new SpatialReference({\r\n            wkid: this.config.spatialReference,\r\n        });\r\n        const center = new Point({\r\n            x: this.config.center[0],\r\n            y: this.config.center[1],\r\n            spatialReference,\r\n        });\r\n        const tileInfo = TileInfo.create({\r\n            spatialReference,\r\n            numLODs: this.config.scales.length,\r\n            scales: this.config.scales,\r\n        });\r\n        const extent = new Extent({\r\n            xmin: this.config.globalExtent.xmin,\r\n            ymin: this.config.globalExtent.ymin,\r\n            xmax: this.config.globalExtent.xmax,\r\n            ymax: this.config.globalExtent.ymax,\r\n            spatialReference,\r\n        });\r\n        this.view = new MapView({\r\n            container: this.config.container,\r\n            map,\r\n            scale: this.config.scale,\r\n            center,\r\n            spatialReference,\r\n            constraints: {\r\n                rotationEnabled: false,\r\n                lods: tileInfo.lods,\r\n                minScale: this.config.minScale,\r\n                maxScale: this.config.maxScale,\r\n                geometry: extent,\r\n            },\r\n            popup: {\r\n                dockEnabled: true,\r\n                dockOptions: {\r\n                    buttonEnabled: false,\r\n                    breakpoint: false,\r\n                },\r\n                viewModel: {\r\n                    includeDefaultActions: false,\r\n                },\r\n            },\r\n        });\r\n        this.view.when(() => {\r\n            emitter.emit('map-created');\r\n        });\r\n\r\n        // barre d'échelle\r\n        const scaleBar = new ScaleBar({\r\n            view: this.view,\r\n            unit: 'metric',\r\n        });\r\n        this.view.ui.add(scaleBar, {\r\n            position: 'bottom-left',\r\n        });\r\n\r\n        // ajout des couches vecteur\r\n        if (this.config.layers) {\r\n            this.layerUtils.getFeatureLayers(this.config.layers).then((layers) => {\r\n                this.view.map.addMany(layers);\r\n            });\r\n        }\r\n\r\n        // ajout des widgets\r\n        if (basemaps.length > 1) {\r\n            WidgetUtils.addBasemapGallery(basemaps, this.view);\r\n        }\r\n        if (this.config.layerList) {\r\n            WidgetUtils.addLayerList(this.view, this.config.layerList);\r\n        }\r\n        if (this.config.overviewDisplay && this.config.overviewBasemap) {\r\n            const overviewBasemap = this.layerUtils.getBasemaps([this.config.overviewBasemap])[0];\r\n            WidgetUtils.addOverview(overviewBasemap, this.view, this.config.scales, this.config.overviewFactor as number, this.config.overviewDisplay);\r\n        }\r\n        if (this.config.showCoords) {\r\n            WidgetUtils.addCoordinates(this.view, this.config.showCoords);\r\n        }\r\n\r\n        // gestion du ctrl + click\r\n        this.view.on('click', (e) => {\r\n            if (e.native.ctrlKey) {\r\n                e.stopPropagation();\r\n                emitter.emit('ctrlClick', [e.mapPoint.x, e.mapPoint.y]);\r\n            }\r\n        });\r\n    }\r\n\r\n    center(position: number[], scale?: number): void {\r\n        this.view.center = new Point({\r\n            x: position[0],\r\n            y: position[1],\r\n            spatialReference: this.view.spatialReference,\r\n        });\r\n        if (scale !== undefined) {\r\n            this.view.scale = scale;\r\n        }\r\n    }\r\n\r\n    centerOnObject(layer: string, ids: string[], highlight: boolean): void {\r\n        // suppression des graphiques existants\r\n        this.view.graphics.removeAll();\r\n\r\n        const queryConfig = this.config.vectorLayerQueries.filter((item) => item.layer === layer)[0];\r\n        if (!queryConfig) {\r\n            console.warn(`Invalid layer name: ${layer}`);\r\n            return;\r\n        }\r\n\r\n        this.layerUtils.queryLayer(queryConfig, ids).then((geometries) => {\r\n            if (!geometries.length) {\r\n                console.warn('No object found with this query.');\r\n                return;\r\n            }\r\n\r\n            const globalExtent = this.getGlobalExtent(geometries, 1.5);\r\n            this.view.extent = globalExtent;\r\n\r\n            if (highlight) {\r\n                const symbols = {\r\n                    point: this.config.selectionPointSymbol,\r\n                    multipoint: this.config.selectionPointSymbol,\r\n                    polyline: this.config.selectionPolylineSymbol,\r\n                    polygon: this.config.selectionPolygonSymbol,\r\n                };\r\n                geometries.forEach((geom) => {\r\n                    const gr = new Graphic({\r\n                        geometry: geom,\r\n                        symbol: symbols[geom.type],\r\n                    });\r\n                    this.view.graphics.add(gr);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    getCenterCoordinates(): number[] {\r\n        return [this.view.center.x, this.view.center.y];\r\n    }\r\n\r\n    showPopup(title: string, content: string): void {\r\n        this.view.popup.open({\r\n            title,\r\n            content,\r\n        });\r\n        // évite que les coordonnées ne soient pas visibles directement sur les petites cartes (il faut cliquer sur le titre)\r\n        this.view.popup.collapsed = false;\r\n    }\r\n\r\n    addMarker(params?: MarkerParams): void {\r\n        const symbol = this.config.markerSymbol;\r\n        if (params !== undefined && params.icon && params.size) {\r\n            symbol.url = params.icon;\r\n            symbol.width = `${params.size[0]}px`;\r\n            symbol.height = `${params.size[1]}px`;\r\n        }\r\n        const coords = params !== undefined && params.position ? params.position : this.getCenterCoordinates();\r\n        const geometry = new Point({\r\n            x: coords[0],\r\n            y: coords[1],\r\n            spatialReference: this.view.spatialReference,\r\n        });\r\n        const gr = new Graphic({\r\n            geometry,\r\n            symbol,\r\n        });\r\n        this.view.graphics.add(gr);\r\n    }\r\n\r\n    addGpxLayer(name: string, url: string, zoom: boolean): void {\r\n        if (!this.isValidLayerName(name)) {\r\n            return;\r\n        }\r\n        GpxUtils.gpxToFeatures(url, this.view.spatialReference).then((r) => {\r\n            const symbols = {\r\n                point: this.config.gpxPointSymbol,\r\n                polyline: this.config.gpxPolylineSymbol,\r\n                polygon: this.config.gpxPolygonSymbol,\r\n            };\r\n            const graphics: Graphic[] = [];\r\n            r.tracks.forEach((gr) => {\r\n                gr.symbol = symbols[gr.geometry.type];\r\n                graphics.push(gr);\r\n            });\r\n            r.waypoints.forEach((gr) => {\r\n                gr.symbol = symbols[gr.geometry.type];\r\n                graphics.push(gr);\r\n            });\r\n            this.addGraphicsLayer(graphics, name, zoom);\r\n        });\r\n    }\r\n\r\n    addTextLayer(name: string, url: string, zoom: boolean): void {\r\n        if (!this.isValidLayerName(name)) {\r\n            return;\r\n        }\r\n        TextUtils.txtToFeatures(url, this.view.spatialReference).then((features) => {\r\n            this.addGraphicsLayer(features, name, zoom);\r\n        });\r\n    }\r\n\r\n    private getGlobalExtent(geometries: Geometry[], expandFactor: number): Extent {\r\n        const getExtent = (geom: Geometry): Extent => {\r\n            const extent = geom.extent;\r\n            if (extent && extent.width && extent.height) {\r\n                return extent.expand(expandFactor);\r\n            }\r\n\r\n            // eslint-disable-next-line no-extra-parens\r\n            const pt = geom.type === 'point' ? [(geom as Point).x, (geom as Point).y] : (geom as MultiPoint).points[0];\r\n            const size = 50;\r\n            return new Extent({\r\n                xmin: pt[0] - size,\r\n                ymin: pt[1] - size,\r\n                xmax: pt[0] + size,\r\n                ymax: pt[1] + size,\r\n                spatialReference: this.view.spatialReference,\r\n            });\r\n        };\r\n\r\n        let result!: Extent;\r\n        geometries.forEach((geom) => {\r\n            if (result) {\r\n                result.union(getExtent(geom));\r\n            } else {\r\n                result = getExtent(geom.clone());\r\n            }\r\n        });\r\n        return result.expand(expandFactor);\r\n    }\r\n\r\n    private isValidLayerName(name: string): boolean {\r\n        // test s'il y a déjà une couche avec ce nom. Si c'est le cas, on considère que le même gpx a déjà été chargé\r\n        if (this.view.map.layers.some((l) => l.title === name)) {\r\n            console.warn(`Map already contains a layer called '${name}'.`);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private addGraphicsLayer(graphics: Graphic[], name: string, zoom: boolean): void {\r\n        const layer = new GraphicsLayer({\r\n            title: name,\r\n        });\r\n        this.view.map.add(layer);\r\n        layer.graphics.addMany(graphics);\r\n        if (zoom) {\r\n            const geometries = graphics.map((f) => f.geometry);\r\n            const extent = this.getGlobalExtent(geometries, 1.5);\r\n            this.view.extent = extent;\r\n        }\r\n    }\r\n\r\n}\r\n","import esriRequest from '@arcgis/core/request';\r\nimport { BasemapItem, ConfigItem } from '../types/ConfigItem';\r\nimport { MapControlParams } from '../types/MapControlParams';\r\n\r\nexport class ConfigUtils {\r\n\r\n    static getConfig(params: MapControlParams): Promise<ConfigItem> {\r\n        return new Promise((resolve, reject) => {\r\n            esriRequest(params.configUrl, {\r\n                responseType: 'json',\r\n            }).then((r) => {\r\n                const config = r.data;\r\n\r\n                let overviewBasemap: BasemapItem | undefined = undefined;\r\n                let overviewFactor: number | undefined = undefined;\r\n                let overviewDisplay: 'collapsed' | 'expanded' | undefined;\r\n                if (params.miniMap !== undefined) {\r\n                    overviewDisplay = params.miniMap;\r\n                    const basemap = this.getBasemap(config.basemaps, config.overviewBasemap);\r\n                    if (basemap) {\r\n                        overviewBasemap = basemap;\r\n                    }\r\n                    overviewFactor = config.overviewFactor;\r\n                }\r\n                let layerList: 'collapsed' | 'expanded' | undefined;\r\n                if (params.layerList !== undefined && params.layers && params.layers.length) {\r\n                    layerList = params.layerList;\r\n                }\r\n                let vectorServiceUrl: string = config.vectorServiceUrl;\r\n                if (vectorServiceUrl.substring(vectorServiceUrl.length - 1) === '/') {\r\n                    vectorServiceUrl = vectorServiceUrl.substring(0, vectorServiceUrl.length - 1);\r\n                }\r\n\r\n                resolve({\r\n                    apiUrl: config.apiUrl,\r\n                    basemaps: this.getBasemaps(config, params),\r\n                    center: params.center || config.center,\r\n                    container: params.container,\r\n                    globalExtent: config.globalExtent,\r\n                    gpxPointSymbol: config.gpxPointSymbol,\r\n                    gpxPolylineSymbol: config.gpxPolylineSymbol,\r\n                    gpxPolygonSymbol: config.gpxPolygonSymbol,\r\n                    layers: params.layers,\r\n                    layerList,\r\n                    markerSymbol: config.markerSymbol,\r\n                    maxScale: config.maxScale,\r\n                    minScale: config.minScale,\r\n                    overviewBasemap,\r\n                    overviewDisplay,\r\n                    overviewFactor,\r\n                    scale: params.scale || config.scale,\r\n                    scales: config.scales,\r\n                    selectionPointSymbol: config.selectionPointSymbol,\r\n                    selectionPolylineSymbol: config.selectionPolylineSymbol,\r\n                    selectionPolygonSymbol: config.selectionPolygonSymbol,\r\n                    spatialReference: config.spatialReference,\r\n                    showCoords: params.showCoords,\r\n                    vectorLayerQueries: config.vectorLayerQueries,\r\n                    vectorServiceUrl,\r\n                    vectorServiceToken: config.vectorServiceToken,\r\n                });\r\n            }).catch((error) => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n\r\n    private static getBasemaps(config, params: MapControlParams): BasemapItem[] {\r\n        const result: BasemapItem[] = [];\r\n        if (params.basemaps === undefined) {\r\n            const basemap = this.getBasemap(config.basemaps, config.defaultBasemap, config.copyright);\r\n            if (basemap) {\r\n                result.push(basemap);\r\n            }\r\n        } else {\r\n            params.basemaps.forEach((bm) => {\r\n                const basemap = this.getBasemap(config.basemaps, bm, config.copyright);\r\n                if (basemap) {\r\n                    result.push(basemap);\r\n                }\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private static getBasemap(basemaps, name: string, copyright?: string): BasemapItem | null {\r\n        const basemap = basemaps[name];\r\n        if (!basemap) {\r\n            console.warn(`Invalid basemap name: ${name}`);\r\n            return null;\r\n        }\r\n        return {\r\n            alias: basemap.alias,\r\n            copyright,\r\n            layerId: basemap.layerId,\r\n            name,\r\n            thumbnailUrl: basemap.thumbnailUrl,\r\n            type: basemap.type,\r\n            url: basemap.url,\r\n            urlTemplate: basemap.urlTemplate,\r\n        };\r\n    }\r\n}\r\n","import esriConfig from '@arcgis/core/config';\r\nimport { createNanoEvents, Emitter } from 'nanoevents';\r\nimport MapClass from './MapClass';\r\nimport { MapControlParams } from './types/MapControlParams';\r\nimport { MarkerParams } from './types/MarkerParams';\r\nimport { ConfigUtils } from './utils/ConfigUtils';\r\n//import * as intl from '@arcgis/core/intl';\r\n\r\ninterface Events {\r\n    ctrlClick: (position: number[]) => void;\r\n}\r\n\r\nexport default class MapControl {\r\n    private map: MapClass;\r\n    private emitter: Emitter;\r\n\r\n    /**\r\n     * MapControl constructor\r\n     * @param params Map parameters\r\n     */\r\n    constructor(params: MapControlParams) {\r\n        this.emitter = createNanoEvents<Events>();\r\n\r\n        ConfigUtils.getConfig(params).then((config) => {\r\n            let apiUrl = config.apiUrl;\r\n            if (apiUrl.charAt(apiUrl.length - 1) !== '/') {\r\n                apiUrl += '/';\r\n            }\r\n            esriConfig.assetsPath = `${apiUrl}@arcgis/core/assets`;\r\n            \r\n            const css = document.createElement('link');\r\n            css.setAttribute('rel', 'stylesheet');\r\n            css.setAttribute('type', 'text/css');\r\n            css.setAttribute('href', `${apiUrl}@arcgis/core/assets/esri/themes/light/main.css`);\r\n            document.getElementsByTagName('head')[0].appendChild(css);\r\n\r\n            //intl.setLocale('fr');\r\n            this.map = new MapClass(config);\r\n            this.map.init(this.emitter);\r\n        }).catch((error) => {\r\n            console.error(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Listen on events\r\n     * @param event Event name\r\n     * @param callback Callback function\r\n     */\r\n    on<E extends keyof Events>(event: E, callback: Events[E]) {\r\n        return this.emitter.on(event, callback);\r\n    }\r\n\r\n    /**\r\n     * Center the map on a new location\r\n     * @param position Coordinates of the center\r\n     * @param scale Scale\r\n     */\r\n    center(position: number[], scale?: number): void {\r\n        this.callMapFunction(() => this.map.center(position, scale));\r\n    }\r\n\r\n    /**\r\n     * Center the map on one or more objects\r\n     * @param layer Layer name\r\n     * @param ids Ids of the objects\r\n     * @param highlight Highlight the object or not\r\n     */\r\n    centerOnObject(layer: string, ids: string[], highlight: boolean): void {\r\n        this.callMapFunction(() => this.map.centerOnObject(layer, ids, highlight));\r\n    }\r\n\r\n    /**\r\n     * Add a GPX layer on the map\r\n     * @param name Name of the layer visible in the layer list control\r\n     * @param url Url of the gpx file\r\n     */\r\n    addGpxLayer(name: string, url: string, zoom: boolean): void {\r\n        this.callMapFunction(() => this.map.addGpxLayer(name, url, zoom));\r\n    }\r\n\r\n    /**\r\n     * Add a layer from a text file on the map\r\n     * @param name Name of the layer visible in the layer list control\r\n     * @param url Url of the text file\r\n     */\r\n    addTextLayer(name: string, url: string, zoom: boolean): void {\r\n        this.callMapFunction(() => this.map.addTextLayer(name, url, zoom));\r\n    }\r\n\r\n    /**\r\n     * Add a marker on the map\r\n     * @param params Marker parameters\r\n     */\r\n    addMarker(params?: MarkerParams): void {\r\n        this.callMapFunction(() => this.map.addMarker(params));\r\n    }\r\n\r\n    /**\r\n     * Display a popup on the map\r\n     * @param title Title of the popup\r\n     * @param content Content of the popup\r\n     */\r\n    showPopup(title: string, content: string): void {\r\n        this.map.showPopup(title, content);\r\n    }\r\n\r\n    private callMapFunction(fct): void {\r\n        if (this.map) {\r\n            fct();\r\n        } else {\r\n            this.emitter.on('map-created', () => fct());\r\n        }\r\n    }\r\n\r\n}\r\n"],"names":["Point","Polyline","Graphic","projection","BaseTileLayer","SpatialReference","TileInfo","property","subclass","FeatureLayer","Basemap","WMTSLayer","TileLayer","ImageryLayer","VectorTileLayer","PictureMarkerSymbol","Widget","Map","MapView","Expand","LayerList","BasemapGallery","LocalBasemapsSource","CoordinateConversion","Format","Conversion","Extent","ScaleBar","GraphicsLayer"],"mappings":"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"}