{"version":3,"file":"main.js","sources":["../../node_modules/nanoevents/index.js","../../src/utils/GpxUtils.ts","../../src/utils/SwissTileLayer.ts","../../src/utils/LayerUtils.ts","../../src/utils/TextUtils.ts","../../src/widgets/Overview.tsx","../../src/utils/WidgetUtils.ts","../../src/MapClass.ts","../../src/utils/ConfigUtils.ts","../../src/MapControl.ts"],"sourcesContent":["export let createNanoEvents = () => ({\n  emit(event, ...args) {\n    let callbacks = this.events[event] || []\n    for (let i = 0, length = callbacks.length; i < length; i++) {\n      callbacks[i](...args)\n    }\n  },\n  events: {},\n  on(event, cb) {\n    this.events[event]?.push(cb) || (this.events[event] = [cb])\n    return () => {\n      this.events[event] = this.events[event]?.filter(i => cb !== i)\n    }\n  }\n})\n","import Geometry from '@arcgis/core/geometry/Geometry';\r\nimport Point from '@arcgis/core/geometry/Point';\r\nimport Polyline from '@arcgis/core/geometry/Polyline';\r\nimport * as projection from '@arcgis/core/geometry/projection';\r\nimport SpatialReference from '@arcgis/core/geometry/SpatialReference';\r\nimport Graphic from '@arcgis/core/Graphic';\r\nimport esriRequest from '@arcgis/core/request';\r\n\r\ntype GpxContent = {\r\n    waypoints: Graphic[];\r\n    tracks: Graphic[];\r\n}\r\n\r\nexport default class GpxUtils {\r\n\r\n    static gpxToFeatures(url: string, spatialReference: SpatialReference): Promise<GpxContent> {\r\n        return new Promise((resolve) => {\r\n            esriRequest(url, {\r\n                responseType: 'xml',\r\n            }).then((r) => {\r\n                const xml = r.data;\r\n                projection.load().then(() => {\r\n                    const result: GpxContent = {\r\n                        waypoints: [],\r\n                        tracks: [],\r\n                    };\r\n                    xml.querySelectorAll('wpt').forEach((waypoint, i) => {\r\n                        const wPt = new Point({ latitude: waypoint.attributes.lat.value, longitude: waypoint.attributes.lon.value });\r\n                        const gr = this.getGraphic(wPt, waypoint, `waypoint ${i + 1}`, spatialReference);\r\n                        result.waypoints.push(gr);\r\n                    });\r\n                    xml.querySelectorAll('trk').forEach((track, i) => {\r\n                        const polyline = new Polyline({ paths: [], spatialReference: { wkid: 4326 } });\r\n                        track.querySelectorAll('trkseg').forEach((segment) => {\r\n                            const path: Point[] = [];\r\n                            const points = segment.querySelectorAll('trkpt');\r\n                            points.forEach((point) => {\r\n                                const pt = new Point({ latitude: point.attributes.lat.value, longitude: point.attributes.lon.value });\r\n                                path.push(pt);\r\n                            });\r\n                            polyline.addPath(path);\r\n                        });\r\n                        const gr = this.getGraphic(polyline, track, `track ${i + 1}`, spatialReference);\r\n                        result.tracks.push(gr);\r\n                    });\r\n                    xml.querySelectorAll('rte').forEach((route, i) => {\r\n                        const polyline = new Polyline({ paths: [], spatialReference: { wkid: 4326 } });\r\n                        const path: Point[] = [];\r\n                        route.querySelectorAll('rtept').forEach((point) => {\r\n                            const pt = new Point({ latitude: point.attributes.lat.value, longitude: point.attributes.lon.value });\r\n                            path.push(pt);\r\n                        });\r\n                        polyline.addPath(path);\r\n                        const gr = this.getGraphic(polyline, route, `route ${i + 1}`, spatialReference);\r\n                        result.tracks.push(gr);\r\n                    });\r\n                    resolve(result);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    private static getGraphic(geom: Geometry, node: any, defaultName: string, spatialReference: SpatialReference): Graphic {\r\n        const n = node.querySelector('name');\r\n        let name = defaultName;\r\n        if (n) {\r\n            name = n.textContent;\r\n        }\r\n        const d = node.querySelector('desc');\r\n        let description = '';\r\n        if (d) {\r\n            description = d.textContent;\r\n        }\r\n        const popupTemplate = {\r\n            title: name,\r\n            content: description,\r\n        };\r\n        return new Graphic({\r\n            geometry: projection.project(geom, spatialReference) as Geometry,\r\n            popupTemplate,\r\n        });\r\n    }\r\n}\r\n","import { property } from '@arcgis/core/core/accessorSupport/decorators/property';\r\nimport { subclass } from '@arcgis/core/core/accessorSupport/decorators/subclass';\r\nimport Point from '@arcgis/core/geometry/Point';\r\nimport SpatialReference from '@arcgis/core/geometry/SpatialReference';\r\nimport BaseTileLayer from '@arcgis/core/layers/BaseTileLayer';\r\nimport TileInfo from '@arcgis/core/layers/support/TileInfo';\r\n\r\n@subclass('esri.layers.SwissTileLayer')\r\nexport default class SwissTileLayer extends BaseTileLayer {\r\n\r\n    @property()\r\n    // eslint-disable-next-line indent\r\n    urlTemplate: string;\r\n\r\n    constructor(params) {\r\n        super();\r\n        const spatialReference = new SpatialReference({\r\n            wkid: 2056,\r\n        });\r\n        const tileInfo = TileInfo.create({\r\n            spatialReference,\r\n            numLODs: params.scales.length,\r\n            scales: params.scales,\r\n        });\r\n        tileInfo.origin = new Point({\r\n            x: 2420000,\r\n            y: 1350000,\r\n            spatialReference,\r\n        });\r\n        this.title = params.title;\r\n        this.urlTemplate = params.urlTemplate;\r\n        this.spatialReference = spatialReference;\r\n        this.tileInfo = tileInfo;\r\n    }\r\n\r\n    getTileUrl(level: number, row: number, col: number): string {\r\n        return this.urlTemplate\r\n            .replace('{level}', level.toString())\r\n            .replace('{col}', col.toString())\r\n            .replace('{row}', row.toString());\r\n    }\r\n\r\n}\r\n","import Basemap from '@arcgis/core/Basemap';\r\nimport Geometry from '@arcgis/core/geometry/Geometry';\r\nimport esriId from '@arcgis/core/identity/IdentityManager';\r\nimport FeatureLayer from '@arcgis/core/layers/FeatureLayer';\r\nimport ImageryLayer from '@arcgis/core/layers/ImageryLayer';\r\nimport MapImageLayer from '@arcgis/core/layers/MapImageLayer';\r\nimport Layer from '@arcgis/core/layers/Layer';\r\nimport TileLayer from '@arcgis/core/layers/TileLayer';\r\nimport VectorTileLayer from '@arcgis/core/layers/VectorTileLayer';\r\nimport WMTSLayer from '@arcgis/core/layers/WMTSLayer';\r\nimport SwissTileLayer from './SwissTileLayer';\r\nimport esriRequest from '@arcgis/core/request';\r\nimport * as query from '@arcgis/core/rest/query';\r\nimport { BasemapItem, ConfigItem, LayerQueryItem } from '../types/ConfigItem';\r\n\r\nexport default class LayerUtils {\r\n    private serviceDescription = null;\r\n    private config: ConfigItem;\r\n    private serviceUrl: string;\r\n\r\n    constructor(config: ConfigItem) {\r\n        this.config = config;\r\n        this.serviceUrl = config.vectorServiceUrl;\r\n        const token = config.vectorServiceToken;\r\n        esriId.registerToken({\r\n            token,\r\n            server: `${this.serviceUrl.split('/rest/services')[0]}/rest/services`,\r\n        });\r\n    }\r\n\r\n    getFeatureLayers(layers: string[]): Promise<FeatureLayer[]> {\r\n        return new Promise((resolve) => {\r\n            this.getServiceDescription().then((r) => {\r\n                const featureLayers: FeatureLayer[] = [];\r\n                r.layers.forEach((l) => {\r\n                    if (layers.includes(l.name)) {\r\n                        const featureLayer = new FeatureLayer({\r\n                            url: `${this.serviceUrl}/${l.id}`,\r\n                            title: l.name,\r\n                        });\r\n                        featureLayer.on('layerview-create', (e) => {\r\n                            const fLayer = e.layerView.layer as FeatureLayer;\r\n                            fLayer.popupTemplate = fLayer.createPopupTemplate();\r\n                            // requête si le champ pricipal est une expression Arcade\r\n                            /*esriRequest(url, {\r\n                                query: {\r\n                                    f: 'json',\r\n                                },\r\n                                responseType: 'json',\r\n                            }).then((r2) => {\r\n                                // r2.displayFieldExpressionInfo contient \"$feature.VOIE_TXT + \\\" \\\" + $feature.NO_ENTREE + \\\", \\\" + $feature.CODEPOST_4 + \\\" \\\" + $feature.LOCALITE;\"\r\n                                // il faudrait convertir cela dans la chaîne ci-dessous\r\n                                //fLayer.popupTemplate.title = '{VOIE_TXT} {NO_ENTREE}, {CODEPOST_4} {LOCALITE};';\r\n                            });*/\r\n                        });\r\n                        featureLayers.push(featureLayer);\r\n                    }\r\n                });\r\n                resolve(featureLayers);\r\n            });\r\n        });\r\n    }\r\n\r\n    async getMapImageLayers(layers: string[]): Promise<MapImageLayer[]> {\r\n        const mapImageLayers: MapImageLayer[] = [];\r\n        const r = await this.getServiceDescription();\r\n        r.layers.forEach((l) => {\r\n            if (layers.includes(l.name)) {\r\n                const layer = new MapImageLayer({\r\n                    title: l.name,\r\n                    url: this.serviceUrl,\r\n                    listMode: 'hide-children',\r\n                    sublayers: [{\r\n                        id: l.id,\r\n                        visible: true,\r\n                    }],\r\n                });\r\n                const sublayer = layer.sublayers.at(0);\r\n                sublayer.load().then(() => {\r\n                    sublayer.popupEnabled = true;\r\n                    sublayer.popupTemplate = sublayer.createPopupTemplate();\r\n                    sublayer.popupTemplate.title = `${l.name}: {${sublayer.sourceJSON.displayField}}`;\r\n                    \r\n                });\r\n                mapImageLayers.push(layer);\r\n            }\r\n        });\r\n        return mapImageLayers;\r\n    }\r\n\r\n    queryLayer(layerQuery: LayerQueryItem, ids: string[]): Promise<Geometry[]> {\r\n        return new Promise((resolve) => {\r\n            this.getServiceDescription().then((r) => {\r\n                const layerInfo = r.layers.filter((l) => l.name === layerQuery.layer)[0];\r\n                if (!layerInfo) {\r\n                    console.warn(`Invalid layer name in config file: ${layerQuery.layer}`);\r\n                    resolve([]);\r\n                    return;\r\n                }\r\n                const field = layerInfo.fields.filter((f) => f.name === layerQuery.field)[0];\r\n                if (!field) {\r\n                    console.warn(`Invalid field name in config file: ${layerQuery.field}`);\r\n                    resolve([]);\r\n                    return;\r\n                }\r\n                let where: string;\r\n                if (this.isNumericField(field.type)) {\r\n                    where = `${layerQuery.field} in (${ids.join(',')})`;\r\n                } else {\r\n                    where = `${layerQuery.field} in ('${ids.join('\\',\\'')}')`;\r\n                }\r\n                query.executeQueryJSON(`${this.serviceUrl}/${layerInfo.id}`, {\r\n                    where,\r\n                    returnGeometry: true,\r\n                }).then((r2) => {\r\n                    resolve(r2.features.map((f) => f.geometry));\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    getBasemaps(basemapItems: BasemapItem[]): Basemap[] {\r\n        const result: Basemap[] = [];\r\n        basemapItems.forEach((item) => {\r\n            const layer = this.getLayer(item);\r\n            if (layer) {\r\n                result.push(new Basemap({\r\n                    baseLayers: [layer],\r\n                    title: item.alias,\r\n                    thumbnailUrl: item.thumbnailUrl,\r\n                }));\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    private getServiceDescription(): Promise<any> {\r\n        return new Promise((resolve) => {\r\n            if (this.serviceDescription === null) {\r\n                esriRequest(`${this.serviceUrl}/layers`, {\r\n                    query: {\r\n                        f: 'json',\r\n                    },\r\n                    responseType: 'json',\r\n                }).then((r) => {\r\n                    this.serviceDescription = r.data;\r\n                    resolve(this.serviceDescription);\r\n                });\r\n            } else {\r\n                resolve(this.serviceDescription);\r\n            }\r\n        });\r\n    }\r\n\r\n    private getLayer(params: BasemapItem): Layer | null {\r\n        switch (params.type) {\r\n            case 'tile':\r\n                return new SwissTileLayer({\r\n                    title: params.alias,\r\n                    urlTemplate: params.urlTemplate,\r\n                    scales: this.config.scales,\r\n                });\r\n            case 'wmts':\r\n                return new WMTSLayer({\r\n                    url: params.url,\r\n                    activeLayer: {\r\n                        id: params.layerId,\r\n                    },\r\n                    copyright: params.copyright,\r\n                });\r\n            case 'mapservice':\r\n                return new TileLayer({\r\n                    url: params.url,\r\n                    copyright: params.copyright,\r\n                });\r\n            case 'imageservice':\r\n                return new ImageryLayer({\r\n                    url: params.url,\r\n                    copyright: params.copyright,\r\n                });\r\n            case 'vectortile':\r\n                return new VectorTileLayer({\r\n                    url: params.url,\r\n                });\r\n            default:\r\n                console.warn(`Unsupported basemap type: ${params.type}`);\r\n                return null;\r\n        }\r\n    }\r\n\r\n    private isNumericField(type: string): boolean {\r\n        if (type === 'esriFieldTypeSmallInteger' ||\r\n            type === 'esriFieldTypeInteger' ||\r\n            type === 'esriFieldTypeSingle' ||\r\n            type === 'esriFieldTypeDouble') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n}\r\n","import Point from '@arcgis/core/geometry/Point';\r\nimport SpatialReference from '@arcgis/core/geometry/SpatialReference';\r\nimport Graphic from '@arcgis/core/Graphic';\r\nimport esriRequest from '@arcgis/core/request';\r\nimport PictureMarkerSymbol from '@arcgis/core/symbols/PictureMarkerSymbol';\r\n\r\nexport default class TextUtils {\r\n\r\n    static txtToFeatures(url: string, spatialReference: SpatialReference): Promise<Graphic[]> {\r\n        return new Promise((resolve) => {\r\n            esriRequest(url, {\r\n                responseType: 'text',\r\n            }).then((r) => {\r\n                const graphics: Graphic[] = [];\r\n                r.data.split('\\n').forEach((row: string, index: number) => {\r\n                    if (index) { // la première ligne contient le nom des champs\r\n                        const parts = row.split('\\t');\r\n                        if (parts.length >= 5) {\r\n                            const coords = parts[0].split(',');\r\n                            const geometry = new Point({ x: parseFloat(coords[1]), y: parseFloat(coords[0]), spatialReference });\r\n                            const popupTemplate = {\r\n                                title: parts[1],\r\n                                content: parts[2],\r\n                            };\r\n                            const symbolSize = parts[4].split(',');\r\n                            const symbol = new PictureMarkerSymbol({\r\n                                url: parts[3],\r\n                                width: `${symbolSize[0]}px`,\r\n                                height: `${symbolSize[1]}px`,\r\n                            });\r\n                            graphics.push(new Graphic({\r\n                                geometry,\r\n                                symbol,\r\n                                popupTemplate,\r\n                            }));\r\n                        }\r\n                    }\r\n                });\r\n                resolve(graphics);\r\n            });\r\n        });\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport Basemap from '@arcgis/core/Basemap';\r\nimport { property, subclass } from '@arcgis/core/core/accessorSupport/decorators';\r\nimport * as reactiveUtils from '@arcgis/core/core/reactiveUtils';\r\nimport Graphic from '@arcgis/core/Graphic';\r\nimport TileInfo from '@arcgis/core/layers/support/TileInfo';\r\nimport Map from '@arcgis/core/Map';\r\nimport MapView from '@arcgis/core/views/MapView';\r\nimport Expand from '@arcgis/core/widgets/Expand';\r\nimport { tsx } from '@arcgis/core/widgets/support/widget';\r\nimport Widget from '@arcgis/core/widgets/Widget';\r\n\r\ninterface OverviewParams extends __esri.WidgetProperties {\r\n    basemap: Basemap;\r\n    mainView: MapView;\r\n    scales: number[];\r\n    factor: number;\r\n}\r\n\r\n@subclass('esri.widgets.Overview')\r\nexport default class Overview extends Widget {\r\n    private overview: MapView;\r\n    private extentGraphic: Graphic;\r\n    private mainView: MapView;\r\n    private basemap: Basemap;\r\n    private scales: number[];\r\n    private factor: number;\r\n\r\n    constructor(params?: OverviewParams) {\r\n        super(params);\r\n    }\r\n\r\n    postInitialize() {\r\n        reactiveUtils.watch(() => [this.mainView.center, this.mainView.interacting, this.mainView.scale], () => {\r\n            this.onViewChange();\r\n        });\r\n    }\r\n\r\n    @property()\r\n        expand: Expand;\r\n\r\n    render() {\r\n        setTimeout(() => {\r\n            if (this.expand.expanded) {\r\n                this.onViewChange();\r\n            }\r\n        }, 10);\r\n        return <div id={`${this.id}_cont`} style=\"width:250px;height:150px;background:#fff\"></div>;\r\n    }\r\n\r\n    private onViewChange(): void {\r\n        if (this.expand.expanded) {\r\n            if (!this.overview && document.getElementById(`${this.id}_cont`)) {\r\n                this.createMap();\r\n                this.createExtentGraphic();\r\n            }\r\n            if (this.overview) {\r\n                this.overview.center = this.mainView.center;\r\n                this.overview.scale = this.mainView.scale * this.factor;\r\n                this.extentGraphic.geometry = this.mainView.extent;\r\n            }\r\n        }\r\n    }\r\n\r\n    private createMap(): void {\r\n        const map = new Map({\r\n            basemap: this.basemap,\r\n        });\r\n        const tileInfo = TileInfo.create({\r\n            spatialReference: this.mainView.spatialReference,\r\n            numLODs: this.scales.length,\r\n            scales: this.scales,\r\n        });\r\n        this.overview = new MapView({\r\n            container: `${this.id}_cont`,\r\n            map,\r\n            scale: this.mainView.scale,\r\n            center: this.mainView.center,\r\n            spatialReference: this.mainView.spatialReference,\r\n            constraints: {\r\n                rotationEnabled: false,\r\n                lods: tileInfo.lods,\r\n            },\r\n            ui: {\r\n                components: [],\r\n            },\r\n        });\r\n        this.overview.when(() => {\r\n            const stopEvtPropagation = (event) => {\r\n                event.stopPropagation();\r\n            };\r\n            this.overview.on('mouse-wheel', stopEvtPropagation);\r\n            this.overview.on('double-click', stopEvtPropagation);\r\n            this.overview.on('double-click', ['Control'], stopEvtPropagation);\r\n            this.overview.on('drag', stopEvtPropagation);\r\n            this.overview.on('drag', ['Shift'], stopEvtPropagation);\r\n            this.overview.on('drag', ['Shift', 'Control'], stopEvtPropagation);\r\n            this.overview.on('key-down', (event) => {\r\n                const prohibitedKeys = [\r\n                    '+',\r\n                    '-',\r\n                    'Shift',\r\n                    '_',\r\n                    '=',\r\n                    'ArrowUp',\r\n                    'ArrowDown',\r\n                    'ArrowRight',\r\n                    'ArrowLeft',\r\n                ];\r\n                const keyPressed = event.key;\r\n                if (prohibitedKeys.indexOf(keyPressed) !== -1) {\r\n                    event.stopPropagation();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private createExtentGraphic(): void {\r\n        const symbol = {\r\n            type: 'simple-fill',\r\n            color: [0, 0, 0, 0.5],\r\n            outline: null,\r\n        };\r\n\r\n        this.extentGraphic = new Graphic({\r\n            symbol,\r\n        });\r\n        this.overview.graphics.add(this.extentGraphic);\r\n    }\r\n}\r\n","import Basemap from '@arcgis/core/Basemap';\r\nimport MapView from '@arcgis/core/views/MapView';\r\nimport BasemapGallery from '@arcgis/core/widgets/BasemapGallery';\r\nimport LocalBasemapsSource from '@arcgis/core/widgets/BasemapGallery/support/LocalBasemapsSource';\r\nimport CoordinateConversion from '@arcgis/core/widgets/CoordinateConversion';\r\nimport Conversion from '@arcgis/core/widgets/CoordinateConversion/support/Conversion';\r\nimport Format from '@arcgis/core/widgets/CoordinateConversion/support/Format';\r\nimport Expand from '@arcgis/core/widgets/Expand';\r\nimport LayerList from '@arcgis/core/widgets/LayerList';\r\nimport Overview from '../widgets/Overview';\r\n\r\nexport default class WidgetUtils {\r\n\r\n    static addOverview(basemap: Basemap, view: MapView, scales: number[], factor: number, display: 'collapsed' | 'expanded'): void {\r\n        const overview = new Overview({\r\n            basemap,\r\n            mainView: view,\r\n            scales,\r\n            factor,\r\n        });\r\n        const overviewExpand = new Expand({\r\n            expandIconClass: 'esri-icon-maps',\r\n            view,\r\n            content: overview,\r\n            expanded: display === 'expanded',\r\n            mode: 'floating',\r\n            autoCollapse: false,\r\n            group: 'api',\r\n        });\r\n        overview.expand = overviewExpand;\r\n        view.ui.add(overviewExpand, {\r\n            position: 'bottom-right',\r\n        });\r\n    }\r\n\r\n    static addLayerList(view: MapView, display: 'collapsed' | 'expanded'): void {\r\n        const layerList = new LayerList({\r\n            view,\r\n        });\r\n        const layerListExpand = new Expand({\r\n            expandIconClass: 'esri-icon-layers',\r\n            view,\r\n            content: layerList,\r\n            expanded: display === 'expanded',\r\n            mode: 'floating',\r\n            autoCollapse: false,\r\n            group: 'api',\r\n        });\r\n        view.ui.add(layerListExpand, {\r\n            position: 'top-right',\r\n        });\r\n    }\r\n\r\n    static addBasemapGallery(items: Basemap[], view: MapView): void {\r\n        const basemapGallery = new BasemapGallery({\r\n            source: new LocalBasemapsSource({\r\n                basemaps: items,\r\n            }),\r\n            view,\r\n        });\r\n\r\n        // redéfinition de la fonction qui compare les basemaps pour que la basemap courante soit sélevtionée dans la liste\r\n        // la fonction de base tient uniquement compte de l'url et comme elles sont identiques pour les différents services de l'asit\r\n        // tous les éléments de l'asit sont sélectionnés lorque la base base active vient de l'asit\r\n        basemapGallery.viewModel.basemapEquals = (a, b) => a.id === b.id;\r\n\r\n        const basemapGalleryExpand = new Expand({\r\n            expandIconClass: 'esri-icon-basemap',\r\n            view,\r\n            content: basemapGallery,\r\n            mode: 'floating',\r\n            autoCollapse: true,\r\n            group: 'api',\r\n        });\r\n        view.ui.add(basemapGalleryExpand, {\r\n            position: 'top-right',\r\n        });\r\n    }\r\n\r\n    static addCoordinates(view: MapView, display: 'collapsed' | 'expanded'): void {\r\n        const coords = new CoordinateConversion({\r\n            view,\r\n        });\r\n        coords.visibleElements = {\r\n            expandButton: false,\r\n        };\r\n\r\n        coords.when(() => {\r\n            const handle = setInterval(() => {\r\n                const div = document.getElementsByClassName('esri-coordinate-conversion')[0] as HTMLElement;\r\n                if (div) {\r\n                    clearInterval(handle);\r\n                    div.style.width = '300px';\r\n                }\r\n            }, 50);\r\n            \r\n            // copie du format basemap pour pouvoir donner un autre nom\r\n            const basemap = coords.formats.find((f) => f.name === 'basemap');\r\n            const mn95 = new Format({\r\n                name: 'mn95',\r\n                coordinateSegments: basemap.coordinateSegments,\r\n                spatialReference: basemap.spatialReference,\r\n            });\r\n\r\n            // ajout du format MN95 par défaut\r\n            coords.formats = coords.formats.filter((f) => f.name === 'dd');\r\n            coords.formats.add(mn95, 0);\r\n            coords.conversions.removeAll();\r\n            const conversion = new Conversion({\r\n                format: mn95,\r\n            });\r\n            coords.conversions.add(conversion);\r\n        });\r\n\r\n        const coordsExpand = new Expand({\r\n            expandIconClass: 'esri-icon-locate',\r\n            view,\r\n            content: coords,\r\n            expanded: display === 'expanded',\r\n            mode: 'floating',\r\n            autoCollapse: false,\r\n            group: 'api',\r\n        });\r\n        view.ui.add(coordsExpand, {\r\n            position: 'bottom-right',\r\n        });\r\n    }\r\n\r\n}\r\n","import Extent from '@arcgis/core/geometry/Extent';\r\nimport Geometry from '@arcgis/core/geometry/Geometry';\r\nimport MultiPoint from '@arcgis/core/geometry/MultiPoint';\r\nimport Point from '@arcgis/core/geometry/Point';\r\nimport SpatialReference from '@arcgis/core/geometry/SpatialReference';\r\nimport Graphic from '@arcgis/core/Graphic';\r\nimport GraphicsLayer from '@arcgis/core/layers/GraphicsLayer';\r\nimport TileInfo from '@arcgis/core/layers/support/TileInfo';\r\nimport Map from '@arcgis/core/Map';\r\nimport MapView from '@arcgis/core/views/MapView';\r\nimport ScaleBar from '@arcgis/core/widgets/ScaleBar';\r\nimport { Emitter } from 'nanoevents';\r\nimport { ConfigItem } from './types/ConfigItem';\r\nimport { MarkerParams } from './types/MarkerParams';\r\nimport GpxUtils from './utils/GpxUtils';\r\nimport LayerUtils from './utils/LayerUtils';\r\nimport TextUtils from './utils/TextUtils';\r\nimport WidgetUtils from './utils/WidgetUtils';\r\n\r\nexport default class MapClass {\r\n    private view: MapView;\r\n    private layerUtils: LayerUtils;\r\n\r\n    constructor(public config: ConfigItem) {\r\n        this.layerUtils = new LayerUtils(config);\r\n    }\r\n\r\n    init(emitter: Emitter): void {\r\n        const basemaps = this.layerUtils.getBasemaps(this.config.basemaps);\r\n        const map = new Map({\r\n            basemap: basemaps[0],\r\n        });\r\n        const spatialReference = new SpatialReference({\r\n            wkid: this.config.spatialReference,\r\n        });\r\n        const center = new Point({\r\n            x: this.config.center[0],\r\n            y: this.config.center[1],\r\n            spatialReference,\r\n        });\r\n        const tileInfo = TileInfo.create({\r\n            spatialReference,\r\n            numLODs: this.config.scales.length,\r\n            scales: this.config.scales,\r\n        });\r\n        const extent = new Extent({\r\n            xmin: this.config.globalExtent.xmin,\r\n            ymin: this.config.globalExtent.ymin,\r\n            xmax: this.config.globalExtent.xmax,\r\n            ymax: this.config.globalExtent.ymax,\r\n            spatialReference,\r\n        });\r\n        this.view = new MapView({\r\n            container: this.config.container,\r\n            map,\r\n            scale: this.config.scale,\r\n            center,\r\n            spatialReference,\r\n            constraints: {\r\n                rotationEnabled: false,\r\n                lods: tileInfo.lods,\r\n                minScale: this.config.minScale,\r\n                maxScale: this.config.maxScale,\r\n                geometry: extent,\r\n            },\r\n            popup: {\r\n                dockEnabled: true,\r\n                dockOptions: {\r\n                    buttonEnabled: false,\r\n                    breakpoint: false,\r\n                },\r\n                viewModel: {\r\n                    includeDefaultActions: false,\r\n                },\r\n            },\r\n        });\r\n        this.view.when(() => {\r\n            emitter.emit('map-created');\r\n        });\r\n\r\n        // barre d'échelle\r\n        const scaleBar = new ScaleBar({\r\n            view: this.view,\r\n            unit: 'metric',\r\n        });\r\n        this.view.ui.add(scaleBar, {\r\n            position: 'bottom-left',\r\n        });\r\n\r\n        // ajout des couches vecteur\r\n        if (this.config.layers) {\r\n            /*this.layerUtils.getFeatureLayers(this.config.layers).then((layers) => {\r\n                this.view.map.addMany(layers.reverse());\r\n            });*/\r\n            this.layerUtils.getMapImageLayers(this.config.layers).then((layers) => {\r\n                this.view.map.addMany(layers.reverse());\r\n            });\r\n        }\r\n\r\n        // ajout des widgets\r\n        if (basemaps.length > 1) {\r\n            WidgetUtils.addBasemapGallery(basemaps, this.view);\r\n        }\r\n        if (this.config.layerList) {\r\n            WidgetUtils.addLayerList(this.view, this.config.layerList);\r\n        }\r\n        if (this.config.overviewDisplay && this.config.overviewBasemap) {\r\n            const overviewBasemap = this.layerUtils.getBasemaps([this.config.overviewBasemap])[0];\r\n            WidgetUtils.addOverview(overviewBasemap, this.view, this.config.scales, this.config.overviewFactor as number, this.config.overviewDisplay);\r\n        }\r\n        if (this.config.showCoords) {\r\n            WidgetUtils.addCoordinates(this.view, this.config.showCoords);\r\n        }\r\n\r\n        // gestion du ctrl + click\r\n        this.view.on('click', (e) => {\r\n            if (e.native.ctrlKey) {\r\n                e.stopPropagation();\r\n                emitter.emit('ctrlClick', [e.mapPoint.x, e.mapPoint.y]);\r\n            }\r\n        });\r\n    }\r\n\r\n    center(position: number[], scale?: number): void {\r\n        this.view.center = new Point({\r\n            x: position[0],\r\n            y: position[1],\r\n            spatialReference: this.view.spatialReference,\r\n        });\r\n        if (scale !== undefined) {\r\n            this.view.scale = scale;\r\n        }\r\n    }\r\n\r\n    centerOnObject(layer: string, ids: string[], highlight: boolean): void {\r\n        // suppression des graphiques existants\r\n        this.view.graphics.removeAll();\r\n\r\n        const queryConfig = this.config.vectorLayerQueries.filter((item) => item.layer === layer)[0];\r\n        if (!queryConfig) {\r\n            console.warn(`Invalid layer name: ${layer}`);\r\n            return;\r\n        }\r\n\r\n        this.layerUtils.queryLayer(queryConfig, ids).then((geometries) => {\r\n            if (!geometries.length) {\r\n                console.warn('No object found with this query.');\r\n                return;\r\n            }\r\n\r\n            const globalExtent = this.getGlobalExtent(geometries, 1.5);\r\n            this.view.extent = globalExtent;\r\n\r\n            if (highlight) {\r\n                const symbols = {\r\n                    point: this.config.selectionPointSymbol,\r\n                    multipoint: this.config.selectionPointSymbol,\r\n                    polyline: this.config.selectionPolylineSymbol,\r\n                    polygon: this.config.selectionPolygonSymbol,\r\n                };\r\n                geometries.forEach((geom) => {\r\n                    const gr = new Graphic({\r\n                        geometry: geom,\r\n                        symbol: symbols[geom.type],\r\n                    });\r\n                    this.view.graphics.add(gr);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    getCenterCoordinates(): number[] {\r\n        return [this.view.center.x, this.view.center.y];\r\n    }\r\n\r\n    showPopup(title: string, content: string): void {\r\n        this.view.openPopup({\r\n            title,\r\n            content,\r\n        });\r\n        // évite que les coordonnées ne soient pas visibles directement sur les petites cartes (il faut cliquer sur le titre)\r\n        //this.view.popup.collapsed = false;\r\n    }\r\n\r\n    addMarker(params?: MarkerParams): void {\r\n        const symbol = this.config.markerSymbol;\r\n        if (params !== undefined && params.icon && params.size) {\r\n            symbol.url = params.icon;\r\n            symbol.width = `${params.size[0]}px`;\r\n            symbol.height = `${params.size[1]}px`;\r\n        }\r\n        const coords = params !== undefined && params.position ? params.position : this.getCenterCoordinates();\r\n        const geometry = new Point({\r\n            x: coords[0],\r\n            y: coords[1],\r\n            spatialReference: this.view.spatialReference,\r\n        });\r\n        const gr = new Graphic({\r\n            geometry,\r\n            symbol,\r\n        });\r\n        this.view.graphics.add(gr);\r\n    }\r\n\r\n    addGpxLayer(name: string, url: string, zoom: boolean): void {\r\n        if (!this.isValidLayerName(name)) {\r\n            return;\r\n        }\r\n        GpxUtils.gpxToFeatures(url, this.view.spatialReference).then((r) => {\r\n            const symbols = {\r\n                point: this.config.gpxPointSymbol,\r\n                polyline: this.config.gpxPolylineSymbol,\r\n                polygon: this.config.gpxPolygonSymbol,\r\n            };\r\n            const graphics: Graphic[] = [];\r\n            r.tracks.forEach((gr) => {\r\n                gr.symbol = symbols[gr.geometry.type];\r\n                graphics.push(gr);\r\n            });\r\n            r.waypoints.forEach((gr) => {\r\n                gr.symbol = symbols[gr.geometry.type];\r\n                graphics.push(gr);\r\n            });\r\n            this.addGraphicsLayer(graphics, name, zoom);\r\n        });\r\n    }\r\n\r\n    addTextLayer(name: string, url: string, zoom: boolean): void {\r\n        if (!this.isValidLayerName(name)) {\r\n            return;\r\n        }\r\n        TextUtils.txtToFeatures(url, this.view.spatialReference).then((features) => {\r\n            this.addGraphicsLayer(features, name, zoom);\r\n        });\r\n    }\r\n\r\n    private getGlobalExtent(geometries: Geometry[], expandFactor: number): Extent {\r\n        const getExtent = (geom: Geometry): Extent => {\r\n            const extent = geom.extent;\r\n            if (extent && extent.width && extent.height) {\r\n                return extent.expand(expandFactor);\r\n            }\r\n\r\n            // eslint-disable-next-line no-extra-parens\r\n            const pt = geom.type === 'point' ? [(geom as Point).x, (geom as Point).y] : (geom as MultiPoint).points[0];\r\n            const size = 50;\r\n            return new Extent({\r\n                xmin: pt[0] - size,\r\n                ymin: pt[1] - size,\r\n                xmax: pt[0] + size,\r\n                ymax: pt[1] + size,\r\n                spatialReference: this.view.spatialReference,\r\n            });\r\n        };\r\n\r\n        let result!: Extent;\r\n        geometries.forEach((geom) => {\r\n            if (result) {\r\n                result.union(getExtent(geom));\r\n            } else {\r\n                result = getExtent(geom.clone());\r\n            }\r\n        });\r\n        return result.expand(expandFactor);\r\n    }\r\n\r\n    private isValidLayerName(name: string): boolean {\r\n        // test s'il y a déjà une couche avec ce nom. Si c'est le cas, on considère que le même gpx a déjà été chargé\r\n        if (this.view.map.layers.some((l) => l.title === name)) {\r\n            console.warn(`Map already contains a layer called '${name}'.`);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private addGraphicsLayer(graphics: Graphic[], name: string, zoom: boolean): void {\r\n        const layer = new GraphicsLayer({\r\n            title: name,\r\n        });\r\n        this.view.map.add(layer);\r\n        layer.graphics.addMany(graphics);\r\n        if (zoom) {\r\n            const geometries = graphics.map((f) => f.geometry);\r\n            const extent = this.getGlobalExtent(geometries, 1.5);\r\n            this.view.extent = extent;\r\n        }\r\n    }\r\n\r\n}\r\n","import esriRequest from '@arcgis/core/request';\r\nimport { BasemapItem, ConfigItem } from '../types/ConfigItem';\r\nimport { MapControlParams } from '../types/MapControlParams';\r\n\r\nexport class ConfigUtils {\r\n\r\n    static getConfig(params: MapControlParams): Promise<ConfigItem> {\r\n        return new Promise((resolve, reject) => {\r\n            esriRequest(params.configUrl, {\r\n                responseType: 'json',\r\n            }).then((r) => {\r\n                const config = r.data;\r\n\r\n                let overviewBasemap: BasemapItem | undefined = undefined;\r\n                let overviewFactor: number | undefined = undefined;\r\n                let overviewDisplay: 'collapsed' | 'expanded' | undefined;\r\n                if (params.miniMap !== undefined) {\r\n                    overviewDisplay = params.miniMap;\r\n                    const basemap = this.getBasemap(config.basemaps, config.overviewBasemap);\r\n                    if (basemap) {\r\n                        overviewBasemap = basemap;\r\n                    }\r\n                    overviewFactor = config.overviewFactor;\r\n                }\r\n                let layerList: 'collapsed' | 'expanded' | undefined;\r\n                if (params.layerList !== undefined && params.layers && params.layers.length) {\r\n                    layerList = params.layerList;\r\n                }\r\n                let vectorServiceUrl: string = config.vectorServiceUrl;\r\n                if (vectorServiceUrl.substring(vectorServiceUrl.length - 1) === '/') {\r\n                    vectorServiceUrl = vectorServiceUrl.substring(0, vectorServiceUrl.length - 1);\r\n                }\r\n\r\n                resolve({\r\n                    apiUrl: config.apiUrl,\r\n                    basemaps: this.getBasemaps(config, params),\r\n                    center: params.center || config.center,\r\n                    container: params.container,\r\n                    globalExtent: config.globalExtent,\r\n                    gpxPointSymbol: config.gpxPointSymbol,\r\n                    gpxPolylineSymbol: config.gpxPolylineSymbol,\r\n                    gpxPolygonSymbol: config.gpxPolygonSymbol,\r\n                    layers: params.layers,\r\n                    layerList,\r\n                    markerSymbol: config.markerSymbol,\r\n                    maxScale: config.maxScale,\r\n                    minScale: config.minScale,\r\n                    overviewBasemap,\r\n                    overviewDisplay,\r\n                    overviewFactor,\r\n                    scale: params.scale || config.scale,\r\n                    scales: config.scales,\r\n                    selectionPointSymbol: config.selectionPointSymbol,\r\n                    selectionPolylineSymbol: config.selectionPolylineSymbol,\r\n                    selectionPolygonSymbol: config.selectionPolygonSymbol,\r\n                    spatialReference: config.spatialReference,\r\n                    showCoords: params.showCoords,\r\n                    vectorLayerQueries: config.vectorLayerQueries,\r\n                    vectorServiceUrl,\r\n                    vectorServiceToken: config.vectorServiceToken,\r\n                });\r\n            }).catch((error) => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n\r\n    private static getBasemaps(config, params: MapControlParams): BasemapItem[] {\r\n        const result: BasemapItem[] = [];\r\n        if (params.basemaps === undefined) {\r\n            const basemap = this.getBasemap(config.basemaps, config.defaultBasemap, config.copyright);\r\n            if (basemap) {\r\n                result.push(basemap);\r\n            }\r\n        } else {\r\n            params.basemaps.forEach((bm) => {\r\n                const basemap = this.getBasemap(config.basemaps, bm, config.copyright);\r\n                if (basemap) {\r\n                    result.push(basemap);\r\n                }\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private static getBasemap(basemaps, name: string, copyright?: string): BasemapItem | null {\r\n        const basemap = basemaps[name];\r\n        if (!basemap) {\r\n            console.warn(`Invalid basemap name: ${name}`);\r\n            return null;\r\n        }\r\n        return {\r\n            alias: basemap.alias,\r\n            copyright,\r\n            layerId: basemap.layerId,\r\n            name,\r\n            thumbnailUrl: basemap.thumbnailUrl,\r\n            type: basemap.type,\r\n            url: basemap.url,\r\n            urlTemplate: basemap.urlTemplate,\r\n        };\r\n    }\r\n}\r\n","import esriConfig from '@arcgis/core/config';\r\nimport { createNanoEvents, Emitter } from 'nanoevents';\r\nimport MapClass from './MapClass';\r\nimport { MapControlParams } from './types/MapControlParams';\r\nimport { MarkerParams } from './types/MarkerParams';\r\nimport { ConfigUtils } from './utils/ConfigUtils';\r\n//import * as intl from '@arcgis/core/intl';\r\n\r\ninterface Events {\r\n    ctrlClick: (position: number[]) => void;\r\n}\r\n\r\nexport default class MapControl {\r\n    private map: MapClass;\r\n    private emitter: Emitter;\r\n\r\n    /**\r\n     * MapControl constructor\r\n     * @param params Map parameters\r\n     */\r\n    constructor(params: MapControlParams) {\r\n        this.emitter = createNanoEvents<Events>();\r\n\r\n        ConfigUtils.getConfig(params).then((config) => {\r\n            let apiUrl = config.apiUrl;\r\n            if (apiUrl.charAt(apiUrl.length - 1) !== '/') {\r\n                apiUrl += '/';\r\n            }\r\n            esriConfig.assetsPath = `${apiUrl}@arcgis/core/assets`;\r\n            \r\n            const css = document.createElement('link');\r\n            css.setAttribute('rel', 'stylesheet');\r\n            css.setAttribute('type', 'text/css');\r\n            css.setAttribute('href', `${apiUrl}@arcgis/core/assets/esri/themes/light/main.css`);\r\n            document.getElementsByTagName('head')[0].appendChild(css);\r\n\r\n            //intl.setLocale('fr');\r\n            this.map = new MapClass(config);\r\n            this.map.init(this.emitter);\r\n        }).catch((error) => {\r\n            console.error(error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Listen on events\r\n     * @param event Event name\r\n     * @param callback Callback function\r\n     */\r\n    on<E extends keyof Events>(event: E, callback: Events[E]) {\r\n        return this.emitter.on(event, callback);\r\n    }\r\n\r\n    /**\r\n     * Center the map on a new location\r\n     * @param position Coordinates of the center\r\n     * @param scale Scale\r\n     */\r\n    center(position: number[], scale?: number): void {\r\n        this.callMapFunction(() => this.map.center(position, scale));\r\n    }\r\n\r\n    /**\r\n     * Center the map on one or more objects\r\n     * @param layer Layer name\r\n     * @param ids Ids of the objects\r\n     * @param highlight Highlight the object or not\r\n     */\r\n    centerOnObject(layer: string, ids: string[], highlight: boolean): void {\r\n        this.callMapFunction(() => this.map.centerOnObject(layer, ids, highlight));\r\n    }\r\n\r\n    /**\r\n     * Add a GPX layer on the map\r\n     * @param name Name of the layer visible in the layer list control\r\n     * @param url Url of the gpx file\r\n     */\r\n    addGpxLayer(name: string, url: string, zoom: boolean): void {\r\n        this.callMapFunction(() => this.map.addGpxLayer(name, url, zoom));\r\n    }\r\n\r\n    /**\r\n     * Add a layer from a text file on the map\r\n     * @param name Name of the layer visible in the layer list control\r\n     * @param url Url of the text file\r\n     */\r\n    addTextLayer(name: string, url: string, zoom: boolean): void {\r\n        this.callMapFunction(() => this.map.addTextLayer(name, url, zoom));\r\n    }\r\n\r\n    /**\r\n     * Add a marker on the map\r\n     * @param params Marker parameters\r\n     */\r\n    addMarker(params?: MarkerParams): void {\r\n        this.callMapFunction(() => this.map.addMarker(params));\r\n    }\r\n\r\n    /**\r\n     * Display a popup on the map\r\n     * @param title Title of the popup\r\n     * @param content Content of the popup\r\n     */\r\n    showPopup(title: string, content: string): void {\r\n        this.map.showPopup(title, content);\r\n    }\r\n\r\n    private callMapFunction(fct): void {\r\n        if (this.map) {\r\n            fct();\r\n        } else {\r\n            this.emitter.on('map-created', () => fct());\r\n        }\r\n    }\r\n\r\n}\r\n"],"names":["createNanoEvents","event","args","callbacks","i","length","cb","_a","GpxUtils","url","spatialReference","resolve","esriRequest","r","xml","projection","result","waypoint","wPt","Point","gr","track","polyline","Polyline","segment","path","point","pt","route","geom","node","defaultName","n","name","d","description","popupTemplate","Graphic","SwissTileLayer","BaseTileLayer","params","SpatialReference","tileInfo","TileInfo","level","row","col","__decorateClass","property","subclass","LayerUtils","config","token","esriId","layers","featureLayers","l","featureLayer","FeatureLayer","e","fLayer","mapImageLayers","layer","MapImageLayer","sublayer","layerQuery","ids","layerInfo","field","f","where","query","r2","basemapItems","item","Basemap","WMTSLayer","TileLayer","ImageryLayer","VectorTileLayer","type","TextUtils","graphics","index","parts","coords","geometry","symbolSize","symbol","PictureMarkerSymbol","Overview","Widget","reactiveUtils","tsx","map","Map","MapView","stopEvtPropagation","prohibitedKeys","keyPressed","WidgetUtils","basemap","view","scales","factor","display","overview","overviewExpand","Expand","layerList","LayerList","layerListExpand","items","basemapGallery","BasemapGallery","LocalBasemapsSource","a","b","basemapGalleryExpand","CoordinateConversion","handle","div","mn95","Format","conversion","Conversion","coordsExpand","MapClass","emitter","basemaps","center","extent","Extent","scaleBar","ScaleBar","overviewBasemap","position","scale","highlight","queryConfig","geometries","globalExtent","symbols","title","content","zoom","features","expandFactor","getExtent","size","GraphicsLayer","ConfigUtils","reject","overviewFactor","overviewDisplay","vectorServiceUrl","error","bm","copyright","MapControl","apiUrl","esriConfig","css","callback","fct"],"mappings":"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","x_google_ignoreList":[0]}